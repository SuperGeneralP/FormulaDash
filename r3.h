/**
 * @file r3.h
 *
 * @brief This header file was generated by cantools version 40.2.1 Thu Mar  6 00:44:10 2025.
 *
 * @copyright Copyright (c) 2018-2019 Erik Moqvist
 *
 * @par License
 * The MIT License (MIT)
 *
 * Permission is hereby granted, free of charge, to any person
 * obtaining a copy of this software and associated documentation
 * files (the "Software"), to deal in the Software without
 * restriction, including without limitation the rights to use, copy,
 * modify, merge, publish, distribute, sublicense, and/or sell copies
 * of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be
 * included in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
 * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS
 * BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN
 * ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
 * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

#ifndef R3_H
#define R3_H

#ifdef __cplusplus
extern "C" {
#endif

#include <stdint.h>
#include <stdbool.h>
#include <stddef.h>

#ifndef EINVAL
#    define EINVAL 22
#endif

/* Frame ids. */
#define R3_GROUP55_FRAME_ID (0x700u)
#define R3_GROUP54_FRAME_ID (0x6f8u)
#define R3_GROUP53_FRAME_ID (0x6f7u)
#define R3_GROUP51_FRAME_ID (0x6f4u)
#define R3_GROUP46_FRAME_ID (0x477u)
#define R3_GROUP44_FRAME_ID (0x475u)
#define R3_GROUP41_FRAME_ID (0x472u)
#define R3_GROUP38_FRAME_ID (0x469u)
#define R3_GROUP37_FRAME_ID (0x3f1u)
#define R3_GROUP36_FRAME_ID (0x3f0u)
#define R3_GROUP35_FRAME_ID (0x3efu)
#define R3_GROUP34_FRAME_ID (0x3eeu)
#define R3_GROUP33_FRAME_ID (0x3edu)
#define R3_GROUP32_FRAME_ID (0x3ecu)
#define R3_GROUP31_FRAME_ID (0x3ebu)
#define R3_GROUP4_FRAME_ID (0x364u)
#define R3_GROUP2_FRAME_ID (0x362u)
#define R3_GROUP30_FRAME_ID (0x3eau)
#define R3_GROUP29_FRAME_ID (0x3e9u)
#define R3_GROUP28_FRAME_ID (0x3e8u)
#define R3_GROUP27_FRAME_ID (0x3e7u)
#define R3_GROUP26_FRAME_ID (0x3e6u)
#define R3_GROUP25_FRAME_ID (0x3e5u)
#define R3_GROUP23_FRAME_ID (0x3e3u)
#define R3_GROUP22_FRAME_ID (0x3e2u)
#define R3_GROUP21_FRAME_ID (0x3e1u)
#define R3_GROUP19_FRAME_ID (0x376u)
#define R3_GROUP18_FRAME_ID (0x375u)
#define R3_GROUP17_FRAME_ID (0x374u)
#define R3_GROUP16_FRAME_ID (0x373u)
#define R3_GROUP14_FRAME_ID (0x371u)
#define R3_GROUP12_FRAME_ID (0x36fu)
#define R3_GROUP11_FRAME_ID (0x36eu)
#define R3_GROUP10_FRAME_ID (0x36du)
#define R3_GROUP9_FRAME_ID (0x36cu)
#define R3_GROUP8_FRAME_ID (0x36bu)
#define R3_GROUP6_FRAME_ID (0x369u)
#define R3_GROUP7_FRAME_ID (0x36au)
#define R3_GROUP3_FRAME_ID (0x363u)
#define R3_GROUP45_FRAME_ID (0x476u)
#define R3_GROUP52_FRAME_ID (0x6f6u)
#define R3_GROUP50_FRAME_ID (0x6f3u)
#define R3_GROUP43_FRAME_ID (0x474u)
#define R3_GROUP42_FRAME_ID (0x473u)
#define R3_GROUP49_FRAME_ID (0x6f2u)
#define R3_GROUP48_FRAME_ID (0x6f1u)
#define R3_GROUP47_FRAME_ID (0x6f0u)
#define R3_GROUP40_FRAME_ID (0x471u)
#define R3_GROUP20_FRAME_ID (0x3e0u)
#define R3_GROUP24_FRAME_ID (0x3e4u)
#define R3_GROUP15_FRAME_ID (0x372u)
#define R3_GROUP39_FRAME_ID (0x470u)
#define R3_GROUP13_FRAME_ID (0x370u)
#define R3_GROUP5_FRAME_ID (0x368u)
#define R3_GROUP1_FRAME_ID (0x361u)
#define R3_GROUP0_FRAME_ID (0x360u)

/* Frame lengths in bytes. */
#define R3_GROUP55_LENGTH (8u)
#define R3_GROUP54_LENGTH (8u)
#define R3_GROUP53_LENGTH (8u)
#define R3_GROUP51_LENGTH (8u)
#define R3_GROUP46_LENGTH (8u)
#define R3_GROUP44_LENGTH (8u)
#define R3_GROUP41_LENGTH (8u)
#define R3_GROUP38_LENGTH (8u)
#define R3_GROUP37_LENGTH (8u)
#define R3_GROUP36_LENGTH (8u)
#define R3_GROUP35_LENGTH (8u)
#define R3_GROUP34_LENGTH (8u)
#define R3_GROUP33_LENGTH (8u)
#define R3_GROUP32_LENGTH (8u)
#define R3_GROUP31_LENGTH (8u)
#define R3_GROUP4_LENGTH (8u)
#define R3_GROUP2_LENGTH (8u)
#define R3_GROUP30_LENGTH (8u)
#define R3_GROUP29_LENGTH (8u)
#define R3_GROUP28_LENGTH (8u)
#define R3_GROUP27_LENGTH (8u)
#define R3_GROUP26_LENGTH (8u)
#define R3_GROUP25_LENGTH (8u)
#define R3_GROUP23_LENGTH (8u)
#define R3_GROUP22_LENGTH (8u)
#define R3_GROUP21_LENGTH (8u)
#define R3_GROUP19_LENGTH (8u)
#define R3_GROUP18_LENGTH (8u)
#define R3_GROUP17_LENGTH (8u)
#define R3_GROUP16_LENGTH (8u)
#define R3_GROUP14_LENGTH (8u)
#define R3_GROUP12_LENGTH (8u)
#define R3_GROUP11_LENGTH (8u)
#define R3_GROUP10_LENGTH (8u)
#define R3_GROUP9_LENGTH (8u)
#define R3_GROUP8_LENGTH (8u)
#define R3_GROUP6_LENGTH (8u)
#define R3_GROUP7_LENGTH (8u)
#define R3_GROUP3_LENGTH (8u)
#define R3_GROUP45_LENGTH (8u)
#define R3_GROUP52_LENGTH (8u)
#define R3_GROUP50_LENGTH (8u)
#define R3_GROUP43_LENGTH (8u)
#define R3_GROUP42_LENGTH (8u)
#define R3_GROUP49_LENGTH (8u)
#define R3_GROUP48_LENGTH (8u)
#define R3_GROUP47_LENGTH (8u)
#define R3_GROUP40_LENGTH (8u)
#define R3_GROUP20_LENGTH (8u)
#define R3_GROUP24_LENGTH (8u)
#define R3_GROUP15_LENGTH (8u)
#define R3_GROUP39_LENGTH (8u)
#define R3_GROUP13_LENGTH (8u)
#define R3_GROUP5_LENGTH (8u)
#define R3_GROUP1_LENGTH (8u)
#define R3_GROUP0_LENGTH (8u)

/* Extended or standard frame types. */
#define R3_GROUP55_IS_EXTENDED (0)
#define R3_GROUP54_IS_EXTENDED (0)
#define R3_GROUP53_IS_EXTENDED (0)
#define R3_GROUP51_IS_EXTENDED (0)
#define R3_GROUP46_IS_EXTENDED (0)
#define R3_GROUP44_IS_EXTENDED (0)
#define R3_GROUP41_IS_EXTENDED (0)
#define R3_GROUP38_IS_EXTENDED (0)
#define R3_GROUP37_IS_EXTENDED (0)
#define R3_GROUP36_IS_EXTENDED (0)
#define R3_GROUP35_IS_EXTENDED (0)
#define R3_GROUP34_IS_EXTENDED (0)
#define R3_GROUP33_IS_EXTENDED (0)
#define R3_GROUP32_IS_EXTENDED (0)
#define R3_GROUP31_IS_EXTENDED (0)
#define R3_GROUP4_IS_EXTENDED (0)
#define R3_GROUP2_IS_EXTENDED (0)
#define R3_GROUP30_IS_EXTENDED (0)
#define R3_GROUP29_IS_EXTENDED (0)
#define R3_GROUP28_IS_EXTENDED (0)
#define R3_GROUP27_IS_EXTENDED (0)
#define R3_GROUP26_IS_EXTENDED (0)
#define R3_GROUP25_IS_EXTENDED (0)
#define R3_GROUP23_IS_EXTENDED (0)
#define R3_GROUP22_IS_EXTENDED (0)
#define R3_GROUP21_IS_EXTENDED (0)
#define R3_GROUP19_IS_EXTENDED (0)
#define R3_GROUP18_IS_EXTENDED (0)
#define R3_GROUP17_IS_EXTENDED (0)
#define R3_GROUP16_IS_EXTENDED (0)
#define R3_GROUP14_IS_EXTENDED (0)
#define R3_GROUP12_IS_EXTENDED (0)
#define R3_GROUP11_IS_EXTENDED (0)
#define R3_GROUP10_IS_EXTENDED (0)
#define R3_GROUP9_IS_EXTENDED (0)
#define R3_GROUP8_IS_EXTENDED (0)
#define R3_GROUP6_IS_EXTENDED (0)
#define R3_GROUP7_IS_EXTENDED (0)
#define R3_GROUP3_IS_EXTENDED (0)
#define R3_GROUP45_IS_EXTENDED (0)
#define R3_GROUP52_IS_EXTENDED (0)
#define R3_GROUP50_IS_EXTENDED (0)
#define R3_GROUP43_IS_EXTENDED (0)
#define R3_GROUP42_IS_EXTENDED (0)
#define R3_GROUP49_IS_EXTENDED (0)
#define R3_GROUP48_IS_EXTENDED (0)
#define R3_GROUP47_IS_EXTENDED (0)
#define R3_GROUP40_IS_EXTENDED (0)
#define R3_GROUP20_IS_EXTENDED (0)
#define R3_GROUP24_IS_EXTENDED (0)
#define R3_GROUP15_IS_EXTENDED (0)
#define R3_GROUP39_IS_EXTENDED (0)
#define R3_GROUP13_IS_EXTENDED (0)
#define R3_GROUP5_IS_EXTENDED (0)
#define R3_GROUP1_IS_EXTENDED (0)
#define R3_GROUP0_IS_EXTENDED (0)

/* Frame cycle times in milliseconds. */


/* Signal choices. */


/* Frame Names. */
#define R3_GROUP55_NAME "group55"
#define R3_GROUP54_NAME "group54"
#define R3_GROUP53_NAME "group53"
#define R3_GROUP51_NAME "group51"
#define R3_GROUP46_NAME "group46"
#define R3_GROUP44_NAME "group44"
#define R3_GROUP41_NAME "group41"
#define R3_GROUP38_NAME "group38"
#define R3_GROUP37_NAME "group37"
#define R3_GROUP36_NAME "group36"
#define R3_GROUP35_NAME "group35"
#define R3_GROUP34_NAME "group34"
#define R3_GROUP33_NAME "group33"
#define R3_GROUP32_NAME "group32"
#define R3_GROUP31_NAME "group31"
#define R3_GROUP4_NAME "group4"
#define R3_GROUP2_NAME "group2"
#define R3_GROUP30_NAME "group30"
#define R3_GROUP29_NAME "group29"
#define R3_GROUP28_NAME "group28"
#define R3_GROUP27_NAME "group27"
#define R3_GROUP26_NAME "group26"
#define R3_GROUP25_NAME "group25"
#define R3_GROUP23_NAME "group23"
#define R3_GROUP22_NAME "group22"
#define R3_GROUP21_NAME "group21"
#define R3_GROUP19_NAME "group19"
#define R3_GROUP18_NAME "group18"
#define R3_GROUP17_NAME "group17"
#define R3_GROUP16_NAME "group16"
#define R3_GROUP14_NAME "group14"
#define R3_GROUP12_NAME "group12"
#define R3_GROUP11_NAME "group11"
#define R3_GROUP10_NAME "group10"
#define R3_GROUP9_NAME "group9"
#define R3_GROUP8_NAME "group8"
#define R3_GROUP6_NAME "group6"
#define R3_GROUP7_NAME "group7"
#define R3_GROUP3_NAME "group3"
#define R3_GROUP45_NAME "group45"
#define R3_GROUP52_NAME "group52"
#define R3_GROUP50_NAME "group50"
#define R3_GROUP43_NAME "group43"
#define R3_GROUP42_NAME "group42"
#define R3_GROUP49_NAME "group49"
#define R3_GROUP48_NAME "group48"
#define R3_GROUP47_NAME "group47"
#define R3_GROUP40_NAME "group40"
#define R3_GROUP20_NAME "group20"
#define R3_GROUP24_NAME "group24"
#define R3_GROUP15_NAME "group15"
#define R3_GROUP39_NAME "group39"
#define R3_GROUP13_NAME "group13"
#define R3_GROUP5_NAME "group5"
#define R3_GROUP1_NAME "group1"
#define R3_GROUP0_NAME "group0"

/* Signal Names. */
#define R3_GROUP54_EXHAUST_CUTOUT_STATE_NAME "exhaust_cutout_state"
#define R3_GROUP54_NITROUS_BOTTLE_OPENER_STATE_NAME "nitrous_bottle_opener_state"
#define R3_GROUP54_GEN_OPEN_LOOP_MTR_CNTRL_1_STATE_NAME "gen_open_loop_mtr_cntrl_1_state"
#define R3_GROUP54_GEN_OPEN_LOOP_MTR_CNTRL_2_STATE_NAME "gen_open_loop_mtr_cntrl_2_state"
#define R3_GROUP54_GEN_OPEN_LOOP_MTR_CNTRL_3_STATE_NAME "gen_open_loop_mtr_cntrl_3_state"
#define R3_GROUP53_GENERIC_OUTPUT_1_20_STATES_NAME "generic_output_1_20_states"
#define R3_GROUP53_CALCULATED_AIR_TEMPERATURE_NAME "calculated_air_temperature"
#define R3_GROUP53_WATER_INJ_ADV_SOLEN_DUTY_CYCLE_NAME "water_inj_adv_solen_duty_cycle"
#define R3_GROUP51_RIGHT_INDICATOR_STATE_NAME "right_indicator_state"
#define R3_GROUP51_LEFT_INDICATOR_STATE_NAME "left_indicator_state"
#define R3_GROUP51_HIGH_BEAM_LIGHT_STATE_NAME "high_beam_light_state"
#define R3_GROUP51_HEAD_LIGHT_STATE_NAME "head_light_state"
#define R3_GROUP51_PARK_LIGHT_STATE_NAME "park_light_state"
#define R3_GROUP46_ENGINE_LIMITER_MAX_RPM_NAME "engine_limiter_max_rpm"
#define R3_GROUP46_CUT_PERCENTAGE_NAME "cut_percentage"
#define R3_GROUP46_ENGINE_LIMITER_FUNCTION_NAME "engine_limiter_function"
#define R3_GROUP46_RPM_LIMITER_FUNCTION_NAME "rpm_limiter_function"
#define R3_GROUP46_CUT_PERCENTAGE_FUNCTION_NAME "cut_percentage_function"
#define R3_GROUP46_ENGINE_LIMITER_METHOD_NAME "engine_limiter_method"
#define R3_GROUP46_RPM_LIMITER_METHOD_NAME "rpm_limiter_method"
#define R3_GROUP44_PRIMARY_FUEL_PUMP_DUTY_CYCLE_NAME "primary_fuel_pump_duty_cycle"
#define R3_GROUP44_AUX_1_FUEL_PUMP_DUTY_CYCLE_NAME "aux_1_fuel_pump_duty_cycle"
#define R3_GROUP44_AUX_2_FUEL_PUMP_DUTY_CYCLE_NAME "aux_2_fuel_pump_duty_cycle"
#define R3_GROUP44_AUX_3_FUEL_PUMP_DUTY_CYCLE_NAME "aux_3_fuel_pump_duty_cycle"
#define R3_GROUP41_CRUISE_CONTROL_TARGET_SPEED_NAME "cruise_control_target_speed"
#define R3_GROUP41_CRUISE_CONTROL_LAST_TARGET_SPEED_NAME "cruise_control_last_target_speed"
#define R3_GROUP41_CRUISE_CONTROL_SPEED_ERROR_NAME "cruise_control_speed_error"
#define R3_GROUP41_CRUISE_CONTROL_CONTROLLER_STATE_NAME "cruise_control_controller_state"
#define R3_GROUP41_CRUISE_CONTROL_INPUT_STATE_NAME "cruise_control_input_state"
#define R3_GROUP38_ECU_TEMPERATURE_NAME "ecu_temperature"
#define R3_GROUP37_SHOCK_TRAVEL_SENSOR_FRONT_LEFT_NAME "shock_travel_sensor_front_left"
#define R3_GROUP37_SHOCK_TRAVEL_SENSOR_FRONT_RIGHT_NAME "shock_travel_sensor_front_right"
#define R3_GROUP37_SHOCK_TRAVEL_SENSOR_REAR_LEFT_NAME "shock_travel_sensor_rear_left"
#define R3_GROUP37_SHOCK_TRAVEL_SENSOR_REAR_RIGHT_NAME "shock_travel_sensor_rear_right"
#define R3_GROUP36_SHK_TRVL_SENS_FRONT_LEFT_UNCAL_NAME "shk_trvl_sens_front_left_uncal"
#define R3_GROUP36_SHK_TRVL_SENS_FRONT_RIGHT_UNCAL_NAME "shk_trvl_sens_front_right_uncal"
#define R3_GROUP36_SHK_TRVL_SENS_REAR_LEFT_UNCAL_NAME "shk_trvl_sens_rear_left_uncal"
#define R3_GROUP36_SHK_TRVL_SENS_REAR_RIGHT_UNCAL_NAME "shk_trvl_sens_rear_right_uncal"
#define R3_GROUP35_WIDEBAND_SENSOR_9_NAME "wideband_sensor_9"
#define R3_GROUP35_WIDEBAND_SENSOR_10_NAME "wideband_sensor_10"
#define R3_GROUP35_WIDEBAND_SENSOR_11_NAME "wideband_sensor_11"
#define R3_GROUP35_WIDEBAND_SENSOR_12_NAME "wideband_sensor_12"
#define R3_GROUP34_WIDEBAND_SENSOR_5_NAME "wideband_sensor_5"
#define R3_GROUP34_WIDEBAND_SENSOR_6_NAME "wideband_sensor_6"
#define R3_GROUP34_WIDEBAND_SENSOR_7_NAME "wideband_sensor_7"
#define R3_GROUP34_WIDEBAND_SENSOR_8_NAME "wideband_sensor_8"
#define R3_GROUP33_TQ_MGMT_COMBINED_IGNITION_CORR_NAME "tq_mgmt_combined_ignition_corr"
#define R3_GROUP32_TQ_MGMT_DRVSHFT_RPM_TARGET_NAME "tq_mgmt_drvshft_rpm_target"
#define R3_GROUP32_TQ_MGMT_DRVSHFT_RPM_ERR_NAME "tq_mgmt_drvshft_rpm_err"
#define R3_GROUP32_TQ_MGMT_DRVSHFT_RPM_ERR_IGN_CORR_NAME "tq_mgmt_drvshft_rpm_err_ign_corr"
#define R3_GROUP32_TQ_MGMT_DRVSHFT_RPM_T_ING_CORR_NAME "tq_mgmt_drvshft_rpm_t_ing_corr"
#define R3_GROUP31_RACE_TIMER_NAME "race_timer"
#define R3_GROUP31_IGNITION_ANGLE_BANK_1_NAME "ignition_angle_bank_1"
#define R3_GROUP31_IGNITION_ANGLE_BANK_2_NAME "ignition_angle_bank_2"
#define R3_GROUP4_INJECTION_STAGE_1_AVERAGE_TIME_NAME "injection_stage_1_average_time"
#define R3_GROUP4_INJECTION_STAGE_2_AVERAGE_TIME_NAME "injection_stage_2_average_time"
#define R3_GROUP4_INJECTION_STAGE_3_AVERAGE_TIME_NAME "injection_stage_3_average_time"
#define R3_GROUP4_INJECTION_STAGE_4_AVERAGE_TIME_NAME "injection_stage_4_average_time"
#define R3_GROUP2_INJECTION_STAGE_1_DUTY_CYCLE_NAME "injection_stage_1_duty_cycle"
#define R3_GROUP2_INJECTION_STAGE_2_DUTY_CYCLE_NAME "injection_stage_2_duty_cycle"
#define R3_GROUP2_IGNITION_ANGLE_LEADING_NAME "ignition_angle_leading"
#define R3_GROUP30_GEARBOX_LINE_PRESSURE_NAME "gearbox_line_pressure"
#define R3_GROUP30_INJECTION_STAGE_3_DUTY_CYCLE_NAME "injection_stage_3_duty_cycle"
#define R3_GROUP30_INJECTION_STAGE_4_DUTY_CYCLE_NAME "injection_stage_4_duty_cycle"
#define R3_GROUP30_CRANK_CASE_PRESSURE_NAME "crank_case_pressure"
#define R3_GROUP29_GENERIC_SENSOR_9_NAME "generic_sensor_9"
#define R3_GROUP29_GENERIC_SENSOR_10_NAME "generic_sensor_10"
#define R3_GROUP29_TARGET_LAMBDA_NAME "target_lambda"
#define R3_GROUP29_NITROUS_STAGE_1_OUTPUT_STATE_NAME "nitrous_stage_1_output_state"
#define R3_GROUP29_NITROUS_STAGE_2_OUTPUT_STATE_NAME "nitrous_stage_2_output_state"
#define R3_GROUP29_NITROUS_STAGE_3_OUTPUT_STATE_NAME "nitrous_stage_3_output_state"
#define R3_GROUP29_NITROUS_STAGE_4_OUTPUT_STATE_NAME "nitrous_stage_4_output_state"
#define R3_GROUP29_NITROUS_STAGE_5_OUTPUT_STATE_NAME "nitrous_stage_5_output_state"
#define R3_GROUP29_NITROUS_STAGE_6_OUTPUT_STATE_NAME "nitrous_stage_6_output_state"
#define R3_GROUP29_WATER_INJECTION_ADV_OUTPUT_STATE_NAME "water_injection_adv_output_state"
#define R3_GROUP29_TORQUE_MANAGEMENT_KNOB_NAME "torque_management_knob"
#define R3_GROUP28_GENERIC_SENSOR_5_NAME "generic_sensor_5"
#define R3_GROUP28_GENERIC_SENSOR_6_NAME "generic_sensor_6"
#define R3_GROUP28_GENERIC_SENSOR_7_NAME "generic_sensor_7"
#define R3_GROUP28_GENERIC_SENSOR_8_NAME "generic_sensor_8"
#define R3_GROUP27_GENERIC_SENSOR_1_NAME "generic_sensor_1"
#define R3_GROUP27_GENERIC_SENSOR_2_NAME "generic_sensor_2"
#define R3_GROUP27_GENERIC_SENSOR_3_NAME "generic_sensor_3"
#define R3_GROUP27_GENERIC_SENSOR_4_NAME "generic_sensor_4"
#define R3_GROUP26_NOS_PRESSURE_SENSOR_2_NAME "nos_pressure_sensor_2"
#define R3_GROUP26_NOS_PRESSURE_SENSOR_3_NAME "nos_pressure_sensor_3"
#define R3_GROUP26_NOS_PRESSURE_SENSOR_4_NAME "nos_pressure_sensor_4"
#define R3_GROUP26_TURBO_SPEED_SENSOR_2_NAME "turbo_speed_sensor_2"
#define R3_GROUP25_IGNITION_SWITCH_NAME "ignition_switch"
#define R3_GROUP25_TURBO_TIMER_TIME_REMAINING_NAME "turbo_timer_time_remaining"
#define R3_GROUP25_TURBO_TIMER_ENGINE_TIME_REMAIN_NAME "turbo_timer_engine_time_remain"
#define R3_GROUP25_PIT_LANE_LIMITER_ERROR_NAME "pit_lane_limiter_error"
#define R3_GROUP25_PIT_LANE_LIMITER_ACTIVE_NAME "pit_lane_limiter_active"
#define R3_GROUP25_PIT_LANE_LIMITER_SWITCH_STATE_NAME "pit_lane_limiter_switch_state"
#define R3_GROUP25_ABS_ERROR_NAME "abs_error"
#define R3_GROUP25_ABS_ACTIVE_NAME "abs_active"
#define R3_GROUP25_ABS_ARMED_NAME "abs_armed"
#define R3_GROUP25_STEERING_WHEEL_ANGLE_NAME "steering_wheel_angle"
#define R3_GROUP25_DRIVESHAFT_RPM_NAME "driveshaft_rpm"
#define R3_GROUP23_FUEL_TRIM_SHORT_TERM_BANK_1_NAME "fuel_trim_short_term_bank_1"
#define R3_GROUP23_FUEL_TRIM_SHORT_TERM_BANK_2_NAME "fuel_trim_short_term_bank_2"
#define R3_GROUP23_FUEL_TRIM_SHORT_TERM_BANK_3_NAME "fuel_trim_short_term_bank_3"
#define R3_GROUP23_FUEL_TRIM_SHORT_TERM_BANK_4_NAME "fuel_trim_short_term_bank_4"
#define R3_GROUP22_FUEL_LEVEL_NAME "fuel_level"
#define R3_GROUP21_GEARBOX_OIL_TEMPERATURE_NAME "gearbox_oil_temperature"
#define R3_GROUP21_DIFF_OIL_TEMPERATURE_NAME "diff_oil_temperature"
#define R3_GROUP21_FUEL_COMPOSITION_NAME "fuel_composition"
#define R3_GROUP19_AMBIENT_AIR_TEMPERATURE_NAME "ambient_air_temperature"
#define R3_GROUP19_RELATIVE_HUMIDITY_NAME "relative_humidity"
#define R3_GROUP19_SPECIFIC_HUMIDITY_NAME "specific_humidity"
#define R3_GROUP19_ABSOLUTE_HUMIDITY_NAME "absolute_humidity"
#define R3_GROUP18_EGT_SENSOR_10_NAME "egt_sensor_10"
#define R3_GROUP18_EGT_SENSOR_11_NAME "egt_sensor_11"
#define R3_GROUP18_EGT_SENSOR_12_NAME "egt_sensor_12"
#define R3_GROUP18_EGT_SENSOR_9_NAME "egt_sensor_9"
#define R3_GROUP17_EGT_SENSOR_5_NAME "egt_sensor_5"
#define R3_GROUP17_EGT_SENSOR_6_NAME "egt_sensor_6"
#define R3_GROUP17_EGT_SENSOR_7_NAME "egt_sensor_7"
#define R3_GROUP17_EGT_SENSOR_8_NAME "egt_sensor_8"
#define R3_GROUP16_EGT_SENSOR_1_NAME "egt_sensor_1"
#define R3_GROUP16_EGT_SENSOR_2_NAME "egt_sensor_2"
#define R3_GROUP16_EGT_SENSOR_3_NAME "egt_sensor_3"
#define R3_GROUP16_EGT_SENSOR_4_NAME "egt_sensor_4"
#define R3_GROUP14_FUEL_FLOW_NAME "fuel_flow"
#define R3_GROUP14_FUEL_FLOW_RETURN_NAME "fuel_flow_return"
#define R3_GROUP12_GENERIC_OUTPUT_1_DUTY_CYCLE_NAME "generic_output_1_duty_cycle"
#define R3_GROUP12_BOOST_CONTROL_OUTPUT_NAME "boost_control_output"
#define R3_GROUP11_ENGINE_LIMITING_ACTIVE_NAME "engine_limiting_active"
#define R3_GROUP11_LAUNCH_CONTROL_IGNITION_RETARD_NAME "launch_control_ignition_retard"
#define R3_GROUP11_LAUNCH_CONTROL_FUEL_ENRICH_NAME "launch_control_fuel_enrich"
#define R3_GROUP11_LONGITUDINAL_G_NAME "longitudinal_g"
#define R3_GROUP10_EXHAUST_CAM_ANGLE_1_NAME "exhaust_cam_angle_1"
#define R3_GROUP10_EXHAUST_CAM_ANGLE_2_NAME "exhaust_cam_angle_2"
#define R3_GROUP9_WHEEL_SPEED_FRONT_LEFT_NAME "wheel_speed_front_left"
#define R3_GROUP9_WHEEL_SPEED_FRONT_RIGHT_NAME "wheel_speed_front_right"
#define R3_GROUP9_WHEEL_SPEED_REAR_LEFT_NAME "wheel_speed_rear_left"
#define R3_GROUP9_WHEEL_SPEED_REAR_RIGHT_NAME "wheel_speed_rear_right"
#define R3_GROUP8_BRAKE_PRESSURE_FRONT_NAME "brake_pressure_front"
#define R3_GROUP8_NOS_PRESSURE_SENSOR_1_NAME "nos_pressure_sensor_1"
#define R3_GROUP8_TURBO_SPEED_SENSOR_1_NAME "turbo_speed_sensor_1"
#define R3_GROUP8_LATERAL_G_NAME "lateral_g"
#define R3_GROUP6_TRIGGER_SYSTEM_ERROR_COUNT_NAME "trigger_system_error_count"
#define R3_GROUP6_TRIGGER_COUNTER_NAME "trigger_counter"
#define R3_GROUP6_TRIGGER_SYNC_LEVEL_NAME "trigger_sync_level"
#define R3_GROUP7_KNOCK_LEVEL_1_NAME "knock_level_1"
#define R3_GROUP7_KNOCK_LEVEL_2_NAME "knock_level_2"
#define R3_GROUP3_WHEEL_SLIP_NAME "wheel_slip"
#define R3_GROUP3_WHEEL_DIFF_NAME "wheel_diff"
#define R3_GROUP3_LAUNCH_CONTROL_END_RPM_NAME "launch_control_end_rpm"
#define R3_GROUP45_BRAKE_PRESSURE_REAR_NAME "brake_pressure_rear"
#define R3_GROUP45_BRAKE_PRESSURE_FRONT_RATIO_NAME "brake_pressure_front_ratio"
#define R3_GROUP45_BRAKE_PRESSURE_REAR_RATIO_NAME "brake_pressure_rear_ratio"
#define R3_GROUP45_BRAKE_PRESSURE_DIFFERENCE_NAME "brake_pressure_difference"
#define R3_GROUP52_TOTAL_FUEL_USED_SINCE_TRIP_NAME "total_fuel_used_since_trip"
#define R3_GROUP52_TRIP_METER_1_NAME "trip_meter_1"
#define R3_GROUP50_FRONT_TYRE_RECOMMENDED_PRESSURE_NAME "front_tyre_recommended_pressure"
#define R3_GROUP50_REAR_TYRE_RECOMMENDED_PRESSURE_NAME "rear_tyre_recommended_pressure"
#define R3_GROUP50_REAR_RIGHT_TYRE_AIR_LEAK_NAME "rear_right_tyre_air_leak"
#define R3_GROUP50_REAR_LEFT_TYRE_AIR_LEAK_NAME "rear_left_tyre_air_leak"
#define R3_GROUP50_FRONT_RIGHT_TYRE_AIR_LEAK_NAME "front_right_tyre_air_leak"
#define R3_GROUP50_FRONT_LEFT_TYRE_AIR_LEAK_NAME "front_left_tyre_air_leak"
#define R3_GROUP50_ENGINE_PROTECTION_SEVERITY_LEVEL_NAME "engine_protection_severity_level"
#define R3_GROUP50_ENGINE_PROTECTION_REASON_NAME "engine_protection_reason"
#define R3_GROUP43_VERTICAL_G_NAME "vertical_g"
#define R3_GROUP43_PITCH_RATE_NAME "pitch_rate"
#define R3_GROUP43_ROLL_RATE_NAME "roll_rate"
#define R3_GROUP43_YAW_RATE_NAME "yaw_rate"
#define R3_GROUP42_TOTAL_FUEL_USED_NAME "total_fuel_used"
#define R3_GROUP42_ROLLING_ANTILAG_SWITCH_STATE_NAME "rolling_antilag_switch_state"
#define R3_GROUP42_ANTILAG_SWITCH_STATE_NAME "antilag_switch_state"
#define R3_GROUP42_ANTILAG_OUTPUT_STATE_NAME "antilag_output_state"
#define R3_GROUP42_TRACTION_CONTROL_SWITCH_STATE_NAME "traction_control_switch_state"
#define R3_GROUP42_PRIMARY_FUEL_PUMP_OUTPUT_STATE_NAME "primary_fuel_pump_output_state"
#define R3_GROUP42_AUX_1_FUEL_PUMP_OUTPUT_STATE_NAME "aux_1_fuel_pump_output_state"
#define R3_GROUP42_AUX_2_FUEL_PUMP_OUTPUT_STATE_NAME "aux_2_fuel_pump_output_state"
#define R3_GROUP42_AUX_3_FUEL_PUMP_OUTPUT_STATE_NAME "aux_3_fuel_pump_output_state"
#define R3_GROUP42_NITROUS_ENABLE_1_SWITCH_STATE_NAME "nitrous_enable_1_switch_state"
#define R3_GROUP42_NITROUS_ENABLE_1_OUTPUT_STATE_NAME "nitrous_enable_1_output_state"
#define R3_GROUP42_NITROUS_ENABLE_2_SWITCH_STATE_NAME "nitrous_enable_2_switch_state"
#define R3_GROUP42_NITROUS_ENABLE_2_OUTPUT_STATE_NAME "nitrous_enable_2_output_state"
#define R3_GROUP42_NITROUS_ENABLE_3_SWITCH_STATE_NAME "nitrous_enable_3_switch_state"
#define R3_GROUP42_NITROUS_ENABLE_3_OUTPUT_STATE_NAME "nitrous_enable_3_output_state"
#define R3_GROUP42_NITROUS_ENABLE_4_SWITCH_STATE_NAME "nitrous_enable_4_switch_state"
#define R3_GROUP42_NITROUS_ENABLE_4_OUTPUT_STATE_NAME "nitrous_enable_4_output_state"
#define R3_GROUP42_NITROUS_OVERRIDE_1_SWITCH_STATE_NAME "nitrous_override_1_switch_state"
#define R3_GROUP42_NITROUS_OVERRIDE_1_OUTPUT_STATE_NAME "nitrous_override_1_output_state"
#define R3_GROUP42_NITROUS_OVERRIDE_2_SWITCH_STATE_NAME "nitrous_override_2_switch_state"
#define R3_GROUP42_NITROUS_OVERRIDE_2_OUTPUT_STATE_NAME "nitrous_override_2_output_state"
#define R3_GROUP42_NITROUS_OVERRIDE_3_SWITCH_STATE_NAME "nitrous_override_3_switch_state"
#define R3_GROUP42_NITROUS_OVERRIDE_3_OUTPUT_STATE_NAME "nitrous_override_3_output_state"
#define R3_GROUP42_NITROUS_OVERRIDE_4_SWITCH_STATE_NAME "nitrous_override_4_switch_state"
#define R3_GROUP42_NITROUS_OVERRIDE_4_OUTPUT_STATE_NAME "nitrous_override_4_output_state"
#define R3_GROUP42_WATER_INJ_ADV_EN_SWITCH_STATE_NAME "water_inj_adv_en_switch_state"
#define R3_GROUP42_WATER_INJ_ADV_EN_OUTPUT_STATE_NAME "water_inj_adv_en_output_state"
#define R3_GROUP42_WATER_INJ_ADV_OVR_SWITCH_STATE_NAME "water_inj_adv_ovr_switch_state"
#define R3_GROUP42_WATER_INJ_ADV_OVR_OUTPUT_STATE_NAME "water_inj_adv_ovr_output_state"
#define R3_GROUP42_CUT_PERCENTAGE_METHOD_NAME "cut_percentage_method"
#define R3_GROUP49_FRONT_LEFT_TYRE_SENSOR_BATTERY_NAME "front_left_tyre_sensor_battery"
#define R3_GROUP49_FRONT_RIGHT_TYRE_SENSOR_BATTERY_NAME "front_right_tyre_sensor_battery"
#define R3_GROUP49_REAR_LEFT_TYRE_SENSOR_BATTERY_NAME "rear_left_tyre_sensor_battery"
#define R3_GROUP49_REAR_RIGHT_TYRE_SENSOR_BATTERY_NAME "rear_right_tyre_sensor_battery"
#define R3_GROUP48_FRONT_LEFT_TYRE_TEMPERATURE_NAME "front_left_tyre_temperature"
#define R3_GROUP48_FRONT_RIGHT_TYRE_TEMPERATURE_NAME "front_right_tyre_temperature"
#define R3_GROUP48_REAR_LEFT_TYRE_TEMPERATURE_NAME "rear_left_tyre_temperature"
#define R3_GROUP48_REAR_RIGHT_TYRE_TEMPERATURE_NAME "rear_right_tyre_temperature"
#define R3_GROUP47_FRONT_LEFT_TYRE_PRESSURE_NAME "front_left_tyre_pressure"
#define R3_GROUP47_FRONT_RIGHT_TYRE_PRESSURE_NAME "front_right_tyre_pressure"
#define R3_GROUP47_REAR_LEFT_TYRE_PRESSURE_NAME "rear_left_tyre_pressure"
#define R3_GROUP47_REAR_RIGHT_TYRE_PRESSURE_NAME "rear_right_tyre_pressure"
#define R3_GROUP40_INJECTOR_PRESSURE_DIFFERENTIAL_NAME "injector_pressure_differential"
#define R3_GROUP40_ACCELERATOR_PEDAL_POSITION_NAME "accelerator_pedal_position"
#define R3_GROUP40_EXHAUST_MANIFOLD_PRESSURE_NAME "exhaust_manifold_pressure"
#define R3_GROUP20_COOLANT_TEMPERATURE_NAME "coolant_temperature"
#define R3_GROUP20_AIR_TEMPERATURE_NAME "air_temperature"
#define R3_GROUP20_FUEL_TEMPERATURE_NAME "fuel_temperature"
#define R3_GROUP20_OIL_TEMPERATURE_NAME "oil_temperature"
#define R3_GROUP24_NEUTRAL_SWITCH_NAME "neutral_switch"
#define R3_GROUP24_REVERSE_SWITCH_NAME "reverse_switch"
#define R3_GROUP24_GEAR_SWITCH_NAME "gear_switch"
#define R3_GROUP24_DECEL_CUT_ACTIVE_NAME "decel_cut_active"
#define R3_GROUP24_TRANSIENT_THROTTLE_ACTIVE_NAME "transient_throttle_active"
#define R3_GROUP24_BRAKE_PEDAL_SWITCH_NAME "brake_pedal_switch"
#define R3_GROUP24_CLUTCH_SWITCH_NAME "clutch_switch"
#define R3_GROUP24_OIL_PRESSURE_LIGHT_NAME "oil_pressure_light"
#define R3_GROUP24_LAUNCH_CONTROL_ACTIVE_NAME "launch_control_active"
#define R3_GROUP24_LAUNCH_CONTROL_SWITCH_NAME "launch_control_switch"
#define R3_GROUP24_AUX_RPM_LIMITER_ACTIVE_NAME "aux_rpm_limiter_active"
#define R3_GROUP24_FLAT_SHIFT_SWITCH_NAME "flat_shift_switch"
#define R3_GROUP24_TORQUE_REDUCTION_ACTIVE_NAME "torque_reduction_active"
#define R3_GROUP24_TRACTION_CONTROL_ENABLED_NAME "traction_control_enabled"
#define R3_GROUP24_TRACTION_CONTROL_ACTIVE_NAME "traction_control_active"
#define R3_GROUP24_AIR_CON_REQUEST_NAME "air_con_request"
#define R3_GROUP24_AIR_CON_OUTPUT_NAME "air_con_output"
#define R3_GROUP24_THERMOFAN_4_ON_NAME "thermofan_4_on"
#define R3_GROUP24_THERMOFAN_2_ON_NAME "thermofan_2_on"
#define R3_GROUP24_THERMOFAN_3_ON_NAME "thermofan_3_on"
#define R3_GROUP24_THERMOFAN_1_ON_NAME "thermofan_1_on"
#define R3_GROUP24_ROTARY_TRIM_POT_1_NAME "rotary_trim_pot_1"
#define R3_GROUP24_ROTARY_TRIM_POT_2_NAME "rotary_trim_pot_2"
#define R3_GROUP24_ROTARY_TRIM_POT_3_NAME "rotary_trim_pot_3"
#define R3_GROUP24_CHECK_ENGINE_LIGHT_NAME "check_engine_light"
#define R3_GROUP24_BATTERY_LIGHT_ACTIVE_NAME "battery_light_active"
#define R3_GROUP24_HAND_BRAKE_STATE_NAME "hand_brake_state"
#define R3_GROUP24_TRACTION_CONTROL_LIGHT_NAME "traction_control_light"
#define R3_GROUP15_BATTERY_VOLTAGE_NAME "battery_voltage"
#define R3_GROUP15_TARGET_BOOST_LEVEL_NAME "target_boost_level"
#define R3_GROUP15_BAROMETRIC_PRESSURE_NAME "barometric_pressure"
#define R3_GROUP39_WIDEBAND_OVERALL_NAME "wideband_overall"
#define R3_GROUP39_WIDEBAND_BANK_1_NAME "wideband_bank_1"
#define R3_GROUP39_WIDEBAND_BANK_2_NAME "wideband_bank_2"
#define R3_GROUP39_GEAR_SELECTOR_POSITION_NAME "gear_selector_position"
#define R3_GROUP39_GEAR_NAME "gear"
#define R3_GROUP13_VEHICLE_SPEED_NAME "vehicle_speed"
#define R3_GROUP13_INTAKE_CAM_ANGLE_1_NAME "intake_cam_angle_1"
#define R3_GROUP13_INTAKE_CAM_ANGLE_2_NAME "intake_cam_angle_2"
#define R3_GROUP5_WIDEBAND_SENSOR_1_NAME "wideband_sensor_1"
#define R3_GROUP5_WIDEBAND_SENSOR_2_NAME "wideband_sensor_2"
#define R3_GROUP5_WIDEBAND_SENSOR_3_NAME "wideband_sensor_3"
#define R3_GROUP5_WIDEBAND_SENSOR_4_NAME "wideband_sensor_4"
#define R3_GROUP1_FUEL_PRESSURE_NAME "fuel_pressure"
#define R3_GROUP1_OIL_PRESSURE_NAME "oil_pressure"
#define R3_GROUP1_ENGINE_DEMAND_NAME "engine_demand"
#define R3_GROUP1_WASTEGATE_PRESSURE_NAME "wastegate_pressure"
#define R3_GROUP0_RPM_NAME "rpm"
#define R3_GROUP0_MANIFOLD_PRESSURE_NAME "manifold_pressure"
#define R3_GROUP0_THROTTLE_POSITION_NAME "throttle_position"
#define R3_GROUP0_COOLANT_PRESSURE_NAME "coolant_pressure"

/**
 * Signals in message group55.
 *
 * All signal values are as on the CAN bus.
 */
struct r3_group55_t {
    /**
     * Dummy signal in empty message.
     */
    uint8_t dummy;
};

/**
 * Signals in message group54.
 *
 * All signal values are as on the CAN bus.
 */
struct r3_group54_t {
    /**
     * -1: Input Error
     * 0: Disabled
     * 1: Closed
     * 2: Opening
     * 3: Open
     * 4: Closing
     * 5: Paused Part Way
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    int8_t exhaust_cutout_state;

    /**
     * -1: Input Error
     * 0: Disabled
     * 1: Closed
     * 2: Opening
     * 3: Open
     * 4: Closing
     * 5: Paused Part Way
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    int8_t nitrous_bottle_opener_state;

    /**
     * -1: Input Error
     * 0: Disabled
     * 1: Closed
     * 2: Opening
     * 3: Open
     * 4: Closing
     * 5: Paused Part Way
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    int8_t gen_open_loop_mtr_cntrl_1_state;

    /**
     * -1: Input Error
     * 0: Disabled
     * 1: Closed
     * 2: Opening
     * 3: Open
     * 4: Closing
     * 5: Paused Part Way
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    int8_t gen_open_loop_mtr_cntrl_2_state;

    /**
     * -1: Input Error
     * 0: Disabled
     * 1: Closed
     * 2: Opening
     * 3: Open
     * 4: Closing
     * 5: Paused Part Way
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    int8_t gen_open_loop_mtr_cntrl_3_state;
};

/**
 * Signals in message group53.
 *
 * All signal values are as on the CAN bus.
 */
struct r3_group53_t {
    /**
     * 0 = Off, 1 = On (at least 0.1% duty cycle if in Duty Cycle mode, or at least 1 Hz if in Frequency mode)
     * Bit X = Generic output X+1
     *
     * Range: -
     * Scale: 1
     * Offset: 1
     */
    uint32_t generic_output_1_20_states;

    /**
     * Range: -
     * Scale: 0.1
     * Offset: 0
     */
    uint16_t calculated_air_temperature;

    /**
     * Range: -
     * Scale: 0.1
     * Offset: 0
     */
    uint16_t water_inj_adv_solen_duty_cycle;
};

/**
 * Signals in message group51.
 *
 * All signal values are as on the CAN bus.
 */
struct r3_group51_t {
    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t right_indicator_state;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t left_indicator_state;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t high_beam_light_state;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t head_light_state;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t park_light_state;
};

/**
 * Signals in message group46.
 *
 * All signal values are as on the CAN bus.
 */
struct r3_group46_t {
    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint16_t engine_limiter_max_rpm;

    /**
     * Range: -
     * Scale: 0.1
     * Offset: 0
     */
    uint16_t cut_percentage;

    /**
     * Engine Limiting Functions table
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t engine_limiter_function;

    /**
     * Engine Limiting Functions table
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t rpm_limiter_function;

    /**
     * Engine Limiting Functions table
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t cut_percentage_function;

    /**
     * 0 = No Cut
     * 1 = Fuel
     * 2 = Ignition
     * 3 = Fuel and Ignition
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t engine_limiter_method;

    /**
     * 0 = No Cut
     * 1 = Fuel
     * 2 = Ignition
     * 3 = Fuel and Ignition
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t rpm_limiter_method;
};

/**
 * Signals in message group44.
 *
 * All signal values are as on the CAN bus.
 */
struct r3_group44_t {
    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint16_t primary_fuel_pump_duty_cycle;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint16_t aux_1_fuel_pump_duty_cycle;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint16_t aux_2_fuel_pump_duty_cycle;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint16_t aux_3_fuel_pump_duty_cycle;
};

/**
 * Signals in message group41.
 *
 * All signal values are as on the CAN bus.
 */
struct r3_group41_t {
    /**
     * Range: -
     * Scale: 0.1
     * Offset: 0
     */
    uint16_t cruise_control_target_speed;

    /**
     * Range: -
     * Scale: 0.1
     * Offset: 0
     */
    uint16_t cruise_control_last_target_speed;

    /**
     * Range: -
     * Scale: 0.1
     * Offset: 0
     */
    int16_t cruise_control_speed_error;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t cruise_control_controller_state;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint16_t cruise_control_input_state;
};

/**
 * Signals in message group38.
 *
 * All signal values are as on the CAN bus.
 */
struct r3_group38_t {
    /**
     * Range: -
     * Scale: 0.1
     * Offset: 0
     */
    uint16_t ecu_temperature;
};

/**
 * Signals in message group37.
 *
 * All signal values are as on the CAN bus.
 */
struct r3_group37_t {
    /**
     * Range: -
     * Scale: 0.1
     * Offset: 0
     */
    int16_t shock_travel_sensor_front_left;

    /**
     * Range: -
     * Scale: 0.1
     * Offset: 0
     */
    int16_t shock_travel_sensor_front_right;

    /**
     * Range: -
     * Scale: 0.1
     * Offset: 0
     */
    int16_t shock_travel_sensor_rear_left;

    /**
     * Range: -
     * Scale: 0.1
     * Offset: 0
     */
    int16_t shock_travel_sensor_rear_right;
};

/**
 * Signals in message group36.
 *
 * All signal values are as on the CAN bus.
 */
struct r3_group36_t {
    /**
     * Range: -
     * Scale: 0.1
     * Offset: 0
     */
    uint16_t shk_trvl_sens_front_left_uncal;

    /**
     * Range: -
     * Scale: 0.1
     * Offset: 0
     */
    uint16_t shk_trvl_sens_front_right_uncal;

    /**
     * Range: -
     * Scale: 0.1
     * Offset: 0
     */
    uint16_t shk_trvl_sens_rear_left_uncal;

    /**
     * Range: -
     * Scale: 0.1
     * Offset: 0
     */
    uint16_t shk_trvl_sens_rear_right_uncal;
};

/**
 * Signals in message group35.
 *
 * All signal values are as on the CAN bus.
 */
struct r3_group35_t {
    /**
     * Range: -
     * Scale: 0.001
     * Offset: 0
     */
    uint16_t wideband_sensor_9;

    /**
     * Range: -
     * Scale: 0.001
     * Offset: 0
     */
    uint16_t wideband_sensor_10;

    /**
     * Range: -
     * Scale: 0.001
     * Offset: 0
     */
    uint16_t wideband_sensor_11;

    /**
     * Range: -
     * Scale: 0.001
     * Offset: 0
     */
    uint16_t wideband_sensor_12;
};

/**
 * Signals in message group34.
 *
 * All signal values are as on the CAN bus.
 */
struct r3_group34_t {
    /**
     * Range: -
     * Scale: 0.001
     * Offset: 0
     */
    uint16_t wideband_sensor_5;

    /**
     * Range: -
     * Scale: 0.001
     * Offset: 0
     */
    uint16_t wideband_sensor_6;

    /**
     * Range: -
     * Scale: 0.001
     * Offset: 0
     */
    uint16_t wideband_sensor_7;

    /**
     * Range: -
     * Scale: 0.001
     * Offset: 0
     */
    uint16_t wideband_sensor_8;
};

/**
 * Signals in message group33.
 *
 * All signal values are as on the CAN bus.
 */
struct r3_group33_t {
    /**
     * Range: -
     * Scale: 0.1
     * Offset: 0
     */
    int16_t tq_mgmt_combined_ignition_corr;
};

/**
 * Signals in message group32.
 *
 * All signal values are as on the CAN bus.
 */
struct r3_group32_t {
    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    int16_t tq_mgmt_drvshft_rpm_target;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    int16_t tq_mgmt_drvshft_rpm_err;

    /**
     * Range: -
     * Scale: 0.1
     * Offset: 0
     */
    int16_t tq_mgmt_drvshft_rpm_err_ign_corr;

    /**
     * Range: -
     * Scale: 0.1
     * Offset: 0
     */
    int16_t tq_mgmt_drvshft_rpm_t_ing_corr;
};

/**
 * Signals in message group31.
 *
 * All signal values are as on the CAN bus.
 */
struct r3_group31_t {
    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint32_t race_timer;

    /**
     * Range: -
     * Scale: 0.1
     * Offset: 0
     */
    int16_t ignition_angle_bank_1;

    /**
     * Range: -
     * Scale: 0.1
     * Offset: 0
     */
    int16_t ignition_angle_bank_2;
};

/**
 * Signals in message group4.
 *
 * All signal values are as on the CAN bus.
 */
struct r3_group4_t {
    /**
     * Range: -
     * Scale: 0.001
     * Offset: 0
     */
    uint16_t injection_stage_1_average_time;

    /**
     * Range: -
     * Scale: 0.001
     * Offset: 0
     */
    uint16_t injection_stage_2_average_time;

    /**
     * Range: -
     * Scale: 0.001
     * Offset: 0
     */
    uint16_t injection_stage_3_average_time;

    /**
     * Range: -
     * Scale: 0.001
     * Offset: 0
     */
    uint16_t injection_stage_4_average_time;
};

/**
 * Signals in message group2.
 *
 * All signal values are as on the CAN bus.
 */
struct r3_group2_t {
    /**
     * Range: -
     * Scale: 0.1
     * Offset: 0
     */
    uint16_t injection_stage_1_duty_cycle;

    /**
     * Range: -
     * Scale: 0.1
     * Offset: 0
     */
    uint16_t injection_stage_2_duty_cycle;

    /**
     * Range: -
     * Scale: 0.1
     * Offset: 0
     */
    int16_t ignition_angle_leading;
};

/**
 * Signals in message group30.
 *
 * All signal values are as on the CAN bus.
 */
struct r3_group30_t {
    /**
     * Range: -
     * Scale: 0.1
     * Offset: -101.3
     */
    uint16_t gearbox_line_pressure;

    /**
     * Range: -
     * Scale: 0.1
     * Offset: 0
     */
    uint16_t injection_stage_3_duty_cycle;

    /**
     * Range: -
     * Scale: 0.1
     * Offset: 0
     */
    uint16_t injection_stage_4_duty_cycle;

    /**
     * Range: -
     * Scale: 0.1
     * Offset: -101.3
     */
    uint16_t crank_case_pressure;
};

/**
 * Signals in message group29.
 *
 * All signal values are as on the CAN bus.
 */
struct r3_group29_t {
    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint16_t generic_sensor_9;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint16_t generic_sensor_10;

    /**
     * Range: -
     * Scale: 0.001
     * Offset: 0
     */
    int16_t target_lambda;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t nitrous_stage_1_output_state;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t nitrous_stage_2_output_state;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t nitrous_stage_3_output_state;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t nitrous_stage_4_output_state;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t nitrous_stage_5_output_state;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t nitrous_stage_6_output_state;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t water_injection_adv_output_state;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    int8_t torque_management_knob;
};

/**
 * Signals in message group28.
 *
 * All signal values are as on the CAN bus.
 */
struct r3_group28_t {
    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint16_t generic_sensor_5;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint16_t generic_sensor_6;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint16_t generic_sensor_7;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint16_t generic_sensor_8;
};

/**
 * Signals in message group27.
 *
 * All signal values are as on the CAN bus.
 */
struct r3_group27_t {
    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint16_t generic_sensor_1;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint16_t generic_sensor_2;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint16_t generic_sensor_3;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint16_t generic_sensor_4;
};

/**
 * Signals in message group26.
 *
 * All signal values are as on the CAN bus.
 */
struct r3_group26_t {
    /**
     * Range: 0..65535 (-101.3..14316.4 kPa)
     * Scale: 0.22
     * Offset: -101.3
     */
    uint16_t nos_pressure_sensor_2;

    /**
     * Range: 0..65535 (-101.3..14316.4 kPa)
     * Scale: 0.22
     * Offset: -101.3
     */
    uint16_t nos_pressure_sensor_3;

    /**
     * Range: 0..65535 (-101.3..14316.4 kPa)
     * Scale: 0.22
     * Offset: -101.3
     */
    uint16_t nos_pressure_sensor_4;

    /**
     * Range: -
     * Scale: 0.1
     * Offset: 0
     */
    uint16_t turbo_speed_sensor_2;
};

/**
 * Signals in message group25.
 *
 * All signal values are as on the CAN bus.
 */
struct r3_group25_t {
    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t ignition_switch;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t turbo_timer_time_remaining;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t turbo_timer_engine_time_remain;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t pit_lane_limiter_error;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t pit_lane_limiter_active;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t pit_lane_limiter_switch_state;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t abs_error;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t abs_active;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t abs_armed;

    /**
     * Range: -
     * Scale: 0.1
     * Offset: 0
     */
    int16_t steering_wheel_angle;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint16_t driveshaft_rpm;
};

/**
 * Signals in message group23.
 *
 * All signal values are as on the CAN bus.
 */
struct r3_group23_t {
    /**
     * Range: -
     * Scale: 0.1
     * Offset: 0
     */
    int16_t fuel_trim_short_term_bank_1;

    /**
     * Range: -
     * Scale: 0.1
     * Offset: 0
     */
    int16_t fuel_trim_short_term_bank_2;

    /**
     * Range: -
     * Scale: 0.1
     * Offset: 0
     */
    int16_t fuel_trim_short_term_bank_3;

    /**
     * Range: -
     * Scale: 0.1
     * Offset: 0
     */
    int16_t fuel_trim_short_term_bank_4;
};

/**
 * Signals in message group22.
 *
 * All signal values are as on the CAN bus.
 */
struct r3_group22_t {
    /**
     * Range: -
     * Scale: 0.1
     * Offset: 0
     */
    uint16_t fuel_level;
};

/**
 * Signals in message group21.
 *
 * All signal values are as on the CAN bus.
 */
struct r3_group21_t {
    /**
     * Range: -
     * Scale: 0.1
     * Offset: 0
     */
    uint16_t gearbox_oil_temperature;

    /**
     * Range: -
     * Scale: 0.1
     * Offset: 0
     */
    uint16_t diff_oil_temperature;

    /**
     * Range: -
     * Scale: 0.1
     * Offset: 0
     */
    uint16_t fuel_composition;
};

/**
 * Signals in message group19.
 *
 * All signal values are as on the CAN bus.
 */
struct r3_group19_t {
    /**
     * Range: -
     * Scale: 0.1
     * Offset: 0
     */
    uint16_t ambient_air_temperature;

    /**
     * Range: -
     * Scale: 0.1
     * Offset: 0
     */
    int16_t relative_humidity;

    /**
     * Range: -
     * Scale: 100
     * Offset: 0
     */
    uint16_t specific_humidity;

    /**
     * Range: -
     * Scale: 0.1
     * Offset: 0
     */
    uint16_t absolute_humidity;
};

/**
 * Signals in message group18.
 *
 * All signal values are as on the CAN bus.
 */
struct r3_group18_t {
    /**
     * Range: -
     * Scale: 0.1
     * Offset: 0
     */
    uint16_t egt_sensor_10;

    /**
     * Range: -
     * Scale: 0.1
     * Offset: 0
     */
    uint16_t egt_sensor_11;

    /**
     * Range: -
     * Scale: 0.1
     * Offset: 0
     */
    uint16_t egt_sensor_12;

    /**
     * Range: -
     * Scale: 0.1
     * Offset: 0
     */
    uint16_t egt_sensor_9;
};

/**
 * Signals in message group17.
 *
 * All signal values are as on the CAN bus.
 */
struct r3_group17_t {
    /**
     * Range: -
     * Scale: 0.1
     * Offset: 0
     */
    uint16_t egt_sensor_5;

    /**
     * Range: -
     * Scale: 0.1
     * Offset: 0
     */
    uint16_t egt_sensor_6;

    /**
     * Range: -
     * Scale: 0.1
     * Offset: 0
     */
    uint16_t egt_sensor_7;

    /**
     * Range: -
     * Scale: 0.1
     * Offset: 0
     */
    uint16_t egt_sensor_8;
};

/**
 * Signals in message group16.
 *
 * All signal values are as on the CAN bus.
 */
struct r3_group16_t {
    /**
     * Range: -
     * Scale: 0.1
     * Offset: 0
     */
    uint16_t egt_sensor_1;

    /**
     * Range: -
     * Scale: 0.1
     * Offset: 0
     */
    uint16_t egt_sensor_2;

    /**
     * Range: -
     * Scale: 0.1
     * Offset: 0
     */
    uint16_t egt_sensor_3;

    /**
     * Range: -
     * Scale: 0.1
     * Offset: 0
     */
    uint16_t egt_sensor_4;
};

/**
 * Signals in message group14.
 *
 * All signal values are as on the CAN bus.
 */
struct r3_group14_t {
    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint16_t fuel_flow;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint16_t fuel_flow_return;
};

/**
 * Signals in message group12.
 *
 * All signal values are as on the CAN bus.
 */
struct r3_group12_t {
    /**
     * Range: -
     * Scale: 0.1
     * Offset: 0
     */
    uint16_t generic_output_1_duty_cycle;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint16_t boost_control_output;
};

/**
 * Signals in message group11.
 *
 * All signal values are as on the CAN bus.
 */
struct r3_group11_t {
    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint16_t engine_limiting_active;

    /**
     * Range: -
     * Scale: 0.1
     * Offset: 0
     */
    int16_t launch_control_ignition_retard;

    /**
     * Range: -
     * Scale: 0.1
     * Offset: 0
     */
    int16_t launch_control_fuel_enrich;

    /**
     * Range: -
     * Scale: 0.1
     * Offset: 0
     */
    int16_t longitudinal_g;
};

/**
 * Signals in message group10.
 *
 * All signal values are as on the CAN bus.
 */
struct r3_group10_t {
    /**
     * Range: -
     * Scale: 0.1
     * Offset: 0
     */
    int16_t exhaust_cam_angle_1;

    /**
     * Range: -
     * Scale: 0.1
     * Offset: 0
     */
    int16_t exhaust_cam_angle_2;
};

/**
 * Signals in message group9.
 *
 * All signal values are as on the CAN bus.
 */
struct r3_group9_t {
    /**
     * Range: -
     * Scale: 0.1
     * Offset: 0
     */
    uint16_t wheel_speed_front_left;

    /**
     * Range: -
     * Scale: 0.1
     * Offset: 0
     */
    uint16_t wheel_speed_front_right;

    /**
     * Range: -
     * Scale: 0.1
     * Offset: 0
     */
    uint16_t wheel_speed_rear_left;

    /**
     * Range: -
     * Scale: 0.1
     * Offset: 0
     */
    uint16_t wheel_speed_rear_right;
};

/**
 * Signals in message group8.
 *
 * All signal values are as on the CAN bus.
 */
struct r3_group8_t {
    /**
     * Range: -
     * Scale: 1
     * Offset: -101.3
     */
    uint16_t brake_pressure_front;

    /**
     * Range: -
     * Scale: 0.22
     * Offset: -101.3
     */
    uint16_t nos_pressure_sensor_1;

    /**
     * Range: -
     * Scale: 10
     * Offset: 0
     */
    uint16_t turbo_speed_sensor_1;

    /**
     * Range: -
     * Scale: 0.1
     * Offset: 0
     */
    int16_t lateral_g;
};

/**
 * Signals in message group6.
 *
 * All signal values are as on the CAN bus.
 */
struct r3_group6_t {
    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint16_t trigger_system_error_count;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint16_t trigger_counter;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint16_t trigger_sync_level;
};

/**
 * Signals in message group7.
 *
 * All signal values are as on the CAN bus.
 */
struct r3_group7_t {
    /**
     * Range: -
     * Scale: 0.01
     * Offset: 0
     */
    uint16_t knock_level_1;

    /**
     * Range: -
     * Scale: 0.01
     * Offset: 0
     */
    uint16_t knock_level_2;
};

/**
 * Signals in message group3.
 *
 * All signal values are as on the CAN bus.
 */
struct r3_group3_t {
    /**
     * Range: -
     * Scale: 0.1
     * Offset: 0
     */
    int16_t wheel_slip;

    /**
     * Range: -
     * Scale: 0.1
     * Offset: 0
     */
    int16_t wheel_diff;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint16_t launch_control_end_rpm;
};

/**
 * Signals in message group45.
 *
 * All signal values are as on the CAN bus.
 */
struct r3_group45_t {
    /**
     * Range: -
     * Scale: 1
     * Offset: -101.3
     */
    uint16_t brake_pressure_rear;

    /**
     * Range: -
     * Scale: 0.1
     * Offset: 0
     */
    uint16_t brake_pressure_front_ratio;

    /**
     * Range: -
     * Scale: 0.1
     * Offset: 0
     */
    uint16_t brake_pressure_rear_ratio;

    /**
     * Front-Rear
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    int16_t brake_pressure_difference;
};

/**
 * Signals in message group52.
 *
 * All signal values are as on the CAN bus.
 */
struct r3_group52_t {
    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    int32_t total_fuel_used_since_trip;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    int32_t trip_meter_1;
};

/**
 * Signals in message group50.
 *
 * All signal values are as on the CAN bus.
 */
struct r3_group50_t {
    /**
     * Range: -
     * Scale: 0.1
     * Offset: -101.3
     */
    uint16_t front_tyre_recommended_pressure;

    /**
     * Range: -
     * Scale: 0.1
     * Offset: -101.3
     */
    uint16_t rear_tyre_recommended_pressure;

    /**
     * 0=No Leak,1=Leak Detected
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t rear_right_tyre_air_leak;

    /**
     * 0=No Leak,1=Leak Detected
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t rear_left_tyre_air_leak;

    /**
     * 0=No Leak,1=Leak Detected
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t front_right_tyre_air_leak;

    /**
     * 0=No Leak,1=Leak Detected
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t front_left_tyre_air_leak;

    /**
     * 0 - Idle, 1 - Level 1, 2 - Level 2, 3 - Level 3'
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t engine_protection_severity_level;

    /**
     * This value is hexadecimal, and represents the OBDII DTC.
     * The upper 2 bits determine which letter it is (0b00 = P, 0b01 = B, 0b10 = C, 0b11 = U). The remaining 14 bits, when viewed as hexadecimal are the number part of the code.
     * 
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint16_t engine_protection_reason;
};

/**
 * Signals in message group43.
 *
 * All signal values are as on the CAN bus.
 */
struct r3_group43_t {
    /**
     * Range: -
     * Scale: 0.1
     * Offset: 0
     */
    int16_t vertical_g;

    /**
     * Range: -
     * Scale: 0.1
     * Offset: 0
     */
    int16_t pitch_rate;

    /**
     * Range: -
     * Scale: 0.1
     * Offset: 0
     */
    int16_t roll_rate;

    /**
     * Range: -
     * Scale: 0.1
     * Offset: 0
     */
    int16_t yaw_rate;
};

/**
 * Signals in message group42.
 *
 * All signal values are as on the CAN bus.
 */
struct r3_group42_t {
    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint32_t total_fuel_used;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t rolling_antilag_switch_state;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t antilag_switch_state;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t antilag_output_state;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    int8_t traction_control_switch_state;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t primary_fuel_pump_output_state;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t aux_1_fuel_pump_output_state;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t aux_2_fuel_pump_output_state;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t aux_3_fuel_pump_output_state;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t nitrous_enable_1_switch_state;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t nitrous_enable_1_output_state;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t nitrous_enable_2_switch_state;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t nitrous_enable_2_output_state;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t nitrous_enable_3_switch_state;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t nitrous_enable_3_output_state;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t nitrous_enable_4_switch_state;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t nitrous_enable_4_output_state;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t nitrous_override_1_switch_state;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t nitrous_override_1_output_state;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t nitrous_override_2_switch_state;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t nitrous_override_2_output_state;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t nitrous_override_3_switch_state;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t nitrous_override_3_output_state;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t nitrous_override_4_switch_state;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t nitrous_override_4_output_state;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t water_inj_adv_en_switch_state;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t water_inj_adv_en_output_state;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t water_inj_adv_ovr_switch_state;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t water_inj_adv_ovr_output_state;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t cut_percentage_method;
};

/**
 * Signals in message group49.
 *
 * All signal values are as on the CAN bus.
 */
struct r3_group49_t {
    /**
     * 0 = error (can be No Signal, Calibrating or Device Timeout)
     *
     * Range: -
     * Scale: 0.001
     * Offset: 0
     */
    uint16_t front_left_tyre_sensor_battery;

    /**
     * 0 = error (can be No Signal, Calibrating or Device Timeout)
     *
     * Range: -
     * Scale: 0.001
     * Offset: 0
     */
    uint16_t front_right_tyre_sensor_battery;

    /**
     * 0 = error (can be No Signal, Calibrating or Device Timeout)
     *
     * Range: -
     * Scale: 0.001
     * Offset: 0
     */
    uint16_t rear_left_tyre_sensor_battery;

    /**
     * 0 = error (can be No Signal, Calibrating or Device Timeout)
     *
     * Range: -
     * Scale: 0.001
     * Offset: 0
     */
    uint16_t rear_right_tyre_sensor_battery;
};

/**
 * Signals in message group48.
 *
 * All signal values are as on the CAN bus.
 */
struct r3_group48_t {
    /**
     * 0 = error (can be No Signal, Calibrating or Device Timeout)
     *
     * Range: -
     * Scale: 0.1
     * Offset: 0
     */
    uint16_t front_left_tyre_temperature;

    /**
     * 0 = error (can be No Signal, Calibrating or Device Timeout)
     *
     * Range: -
     * Scale: 0.1
     * Offset: 0
     */
    uint16_t front_right_tyre_temperature;

    /**
     * 0 = error (can be No Signal, Calibrating or Device Timeout)
     *
     * Range: -
     * Scale: 0.1
     * Offset: 0
     */
    uint16_t rear_left_tyre_temperature;

    /**
     * 0 = error (can be No Signal, Calibrating or Device Timeout)
     *
     * Range: -
     * Scale: 0.1
     * Offset: 0
     */
    uint16_t rear_right_tyre_temperature;
};

/**
 * Signals in message group47.
 *
 * All signal values are as on the CAN bus.
 */
struct r3_group47_t {
    /**
     * 0 = error (can be No Signal, Calibrating or Device Timeout)
     *
     * Range: -
     * Scale: 0.1
     * Offset: -101.3
     */
    uint16_t front_left_tyre_pressure;

    /**
     * 0 = error (can be No Signal, Calibrating or Device Timeout)
     *
     * Range: -
     * Scale: 0.1
     * Offset: -101.3
     */
    uint16_t front_right_tyre_pressure;

    /**
     * 0 = error (can be No Signal, Calibrating or Device Timeout)
     *
     * Range: -
     * Scale: 0.1
     * Offset: -101.3
     */
    uint16_t rear_left_tyre_pressure;

    /**
     * 0 = error (can be No Signal, Calibrating or Device Timeout)
     *
     * Range: -
     * Scale: 0.1
     * Offset: -101.3
     */
    uint16_t rear_right_tyre_pressure;
};

/**
 * Signals in message group40.
 *
 * All signal values are as on the CAN bus.
 */
struct r3_group40_t {
    /**
     * Range: -
     * Scale: 0.1
     * Offset: 0
     */
    int16_t injector_pressure_differential;

    /**
     * Range: -
     * Scale: 0.1
     * Offset: 0
     */
    uint16_t accelerator_pedal_position;

    /**
     * Range: -
     * Scale: 0.1
     * Offset: 0
     */
    uint16_t exhaust_manifold_pressure;
};

/**
 * Signals in message group20.
 *
 * All signal values are as on the CAN bus.
 */
struct r3_group20_t {
    /**
     * 20-01
     *
     * Range: -
     * Scale: 0.1
     * Offset: 0
     */
    uint16_t coolant_temperature;

    /**
     * 20-02
     *
     * Range: -
     * Scale: 0.1
     * Offset: 0
     */
    uint16_t air_temperature;

    /**
     * 20-03
     *
     * Range: -
     * Scale: 0.1
     * Offset: 0
     */
    uint16_t fuel_temperature;

    /**
     * 20-04
     *
     * Range: -
     * Scale: 0.1
     * Offset: 0
     */
    uint16_t oil_temperature;
};

/**
 * Signals in message group24.
 *
 * All signal values are as on the CAN bus.
 */
struct r3_group24_t {
    /**
     * 24-01
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t neutral_switch;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t reverse_switch;

    /**
     * 24-03
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t gear_switch;

    /**
     * 24-01
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t decel_cut_active;

    /**
     * 24-01
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t transient_throttle_active;

    /**
     * 24-01
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t brake_pedal_switch;

    /**
     * 24-07
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t clutch_switch;

    /**
     * 24-08
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t oil_pressure_light;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t launch_control_active;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t launch_control_switch;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t aux_rpm_limiter_active;

    /**
     * 24-12
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t flat_shift_switch;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t torque_reduction_active;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t traction_control_enabled;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t traction_control_active;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t air_con_request;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t air_con_output;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t thermofan_4_on;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t thermofan_2_on;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t thermofan_3_on;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t thermofan_1_on;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    int8_t rotary_trim_pot_1;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    int8_t rotary_trim_pot_2;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    int8_t rotary_trim_pot_3;

    /**
     * 24-25
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t check_engine_light;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t battery_light_active;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t hand_brake_state;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t traction_control_light;
};

/**
 * Signals in message group15.
 *
 * All signal values are as on the CAN bus.
 */
struct r3_group15_t {
    /**
     * 15-01
     *
     * Range: -
     * Scale: 0.1
     * Offset: 0
     */
    uint16_t battery_voltage;

    /**
     * 15-02
     *
     * Range: -
     * Scale: 0.1
     * Offset: 0
     */
    uint16_t target_boost_level;

    /**
     * 15-03
     *
     * Range: -
     * Scale: 0.1
     * Offset: 0
     */
    uint16_t barometric_pressure;
};

/**
 * Signals in message group39.
 *
 * All signal values are as on the CAN bus.
 */
struct r3_group39_t {
    /**
     * 39-01
     *
     * Range: -
     * Scale: 0.001
     * Offset: 0
     */
    uint16_t wideband_overall;

    /**
     * 39-02
     *
     * Range: -
     * Scale: 0.001
     * Offset: 0
     */
    uint16_t wideband_bank_1;

    /**
     * 39-03
     *
     * Range: -
     * Scale: 0.001
     * Offset: 0
     */
    uint16_t wideband_bank_2;

    /**
     * 39-04
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    int8_t gear_selector_position;

    /**
     * 39-05
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    int8_t gear;
};

/**
 * Signals in message group13.
 *
 * All signal values are as on the CAN bus.
 */
struct r3_group13_t {
    /**
     * 13-01
     *
     * Range: -
     * Scale: 0.1
     * Offset: 0
     */
    uint16_t vehicle_speed;

    /**
     * 13-02
     *
     * Range: -
     * Scale: 0.1
     * Offset: 0
     */
    int16_t intake_cam_angle_1;

    /**
     * 13-03
     *
     * Range: -
     * Scale: 0.1
     * Offset: 0
     */
    int16_t intake_cam_angle_2;
};

/**
 * Signals in message group5.
 *
 * All signal values are as on the CAN bus.
 */
struct r3_group5_t {
    /**
     * 05-01
     *
     * Range: -
     * Scale: 0.001
     * Offset: 0
     */
    uint16_t wideband_sensor_1;

    /**
     * 05-02
     *
     * Range: -
     * Scale: 0.001
     * Offset: 0
     */
    uint16_t wideband_sensor_2;

    /**
     * 05-03
     *
     * Range: -
     * Scale: 0.001
     * Offset: 0
     */
    uint16_t wideband_sensor_3;

    /**
     * 05-04
     *
     * Range: -
     * Scale: 0.001
     * Offset: 0
     */
    uint16_t wideband_sensor_4;
};

/**
 * Signals in message group1.
 *
 * All signal values are as on the CAN bus.
 */
struct r3_group1_t {
    /**
     * 01-01
     *
     * Range: -
     * Scale: 0.1
     * Offset: -101.3
     */
    uint16_t fuel_pressure;

    /**
     * 01-02
     *
     * Range: -
     * Scale: 0.1
     * Offset: -101.3
     */
    uint16_t oil_pressure;

    /**
     * 01-03
     *
     * Range: -
     * Scale: 0.1
     * Offset: 0
     */
    uint16_t engine_demand;

    /**
     * 01-04
     *
     * Range: -
     * Scale: 0.1
     * Offset: -101.3
     */
    uint16_t wastegate_pressure;
};

/**
 * Signals in message group0.
 *
 * All signal values are as on the CAN bus.
 */
struct r3_group0_t {
    /**
     * 00-01
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint16_t rpm;

    /**
     * 00-02
     *
     * Range: -
     * Scale: 0.1
     * Offset: 0
     */
    uint16_t manifold_pressure;

    /**
     * 00-03
     *
     * Range: -
     * Scale: 0.1
     * Offset: 0
     */
    uint16_t throttle_position;

    /**
     * 00-04
     *
     * Range: -
     * Scale: 0.1
     * Offset: -101.3
     */
    uint16_t coolant_pressure;
};

/**
 * Pack message group55.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int r3_group55_pack(
    uint8_t *dst_p,
    const struct r3_group55_t *src_p,
    size_t size);

/**
 * Unpack message group55.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int r3_group55_unpack(
    struct r3_group55_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from group55.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int r3_group55_init(struct r3_group55_t *msg_p);

/**
 * Pack message group54.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int r3_group54_pack(
    uint8_t *dst_p,
    const struct r3_group54_t *src_p,
    size_t size);

/**
 * Unpack message group54.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int r3_group54_unpack(
    struct r3_group54_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from group54.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int r3_group54_init(struct r3_group54_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int8_t r3_group54_exhaust_cutout_state_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double r3_group54_exhaust_cutout_state_decode(int8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool r3_group54_exhaust_cutout_state_is_in_range(int8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int8_t r3_group54_nitrous_bottle_opener_state_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double r3_group54_nitrous_bottle_opener_state_decode(int8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool r3_group54_nitrous_bottle_opener_state_is_in_range(int8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int8_t r3_group54_gen_open_loop_mtr_cntrl_1_state_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double r3_group54_gen_open_loop_mtr_cntrl_1_state_decode(int8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool r3_group54_gen_open_loop_mtr_cntrl_1_state_is_in_range(int8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int8_t r3_group54_gen_open_loop_mtr_cntrl_2_state_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double r3_group54_gen_open_loop_mtr_cntrl_2_state_decode(int8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool r3_group54_gen_open_loop_mtr_cntrl_2_state_is_in_range(int8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int8_t r3_group54_gen_open_loop_mtr_cntrl_3_state_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double r3_group54_gen_open_loop_mtr_cntrl_3_state_decode(int8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool r3_group54_gen_open_loop_mtr_cntrl_3_state_is_in_range(int8_t value);

/**
 * Pack message group53.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int r3_group53_pack(
    uint8_t *dst_p,
    const struct r3_group53_t *src_p,
    size_t size);

/**
 * Unpack message group53.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int r3_group53_unpack(
    struct r3_group53_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from group53.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int r3_group53_init(struct r3_group53_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t r3_group53_generic_output_1_20_states_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double r3_group53_generic_output_1_20_states_decode(uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool r3_group53_generic_output_1_20_states_is_in_range(uint32_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t r3_group53_calculated_air_temperature_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double r3_group53_calculated_air_temperature_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool r3_group53_calculated_air_temperature_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t r3_group53_water_inj_adv_solen_duty_cycle_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double r3_group53_water_inj_adv_solen_duty_cycle_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool r3_group53_water_inj_adv_solen_duty_cycle_is_in_range(uint16_t value);

/**
 * Pack message group51.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int r3_group51_pack(
    uint8_t *dst_p,
    const struct r3_group51_t *src_p,
    size_t size);

/**
 * Unpack message group51.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int r3_group51_unpack(
    struct r3_group51_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from group51.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int r3_group51_init(struct r3_group51_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t r3_group51_right_indicator_state_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double r3_group51_right_indicator_state_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool r3_group51_right_indicator_state_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t r3_group51_left_indicator_state_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double r3_group51_left_indicator_state_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool r3_group51_left_indicator_state_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t r3_group51_high_beam_light_state_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double r3_group51_high_beam_light_state_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool r3_group51_high_beam_light_state_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t r3_group51_head_light_state_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double r3_group51_head_light_state_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool r3_group51_head_light_state_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t r3_group51_park_light_state_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double r3_group51_park_light_state_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool r3_group51_park_light_state_is_in_range(uint8_t value);

/**
 * Pack message group46.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int r3_group46_pack(
    uint8_t *dst_p,
    const struct r3_group46_t *src_p,
    size_t size);

/**
 * Unpack message group46.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int r3_group46_unpack(
    struct r3_group46_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from group46.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int r3_group46_init(struct r3_group46_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t r3_group46_engine_limiter_max_rpm_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double r3_group46_engine_limiter_max_rpm_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool r3_group46_engine_limiter_max_rpm_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t r3_group46_cut_percentage_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double r3_group46_cut_percentage_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool r3_group46_cut_percentage_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t r3_group46_engine_limiter_function_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double r3_group46_engine_limiter_function_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool r3_group46_engine_limiter_function_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t r3_group46_rpm_limiter_function_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double r3_group46_rpm_limiter_function_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool r3_group46_rpm_limiter_function_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t r3_group46_cut_percentage_function_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double r3_group46_cut_percentage_function_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool r3_group46_cut_percentage_function_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t r3_group46_engine_limiter_method_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double r3_group46_engine_limiter_method_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool r3_group46_engine_limiter_method_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t r3_group46_rpm_limiter_method_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double r3_group46_rpm_limiter_method_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool r3_group46_rpm_limiter_method_is_in_range(uint8_t value);

/**
 * Pack message group44.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int r3_group44_pack(
    uint8_t *dst_p,
    const struct r3_group44_t *src_p,
    size_t size);

/**
 * Unpack message group44.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int r3_group44_unpack(
    struct r3_group44_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from group44.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int r3_group44_init(struct r3_group44_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t r3_group44_primary_fuel_pump_duty_cycle_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double r3_group44_primary_fuel_pump_duty_cycle_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool r3_group44_primary_fuel_pump_duty_cycle_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t r3_group44_aux_1_fuel_pump_duty_cycle_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double r3_group44_aux_1_fuel_pump_duty_cycle_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool r3_group44_aux_1_fuel_pump_duty_cycle_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t r3_group44_aux_2_fuel_pump_duty_cycle_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double r3_group44_aux_2_fuel_pump_duty_cycle_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool r3_group44_aux_2_fuel_pump_duty_cycle_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t r3_group44_aux_3_fuel_pump_duty_cycle_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double r3_group44_aux_3_fuel_pump_duty_cycle_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool r3_group44_aux_3_fuel_pump_duty_cycle_is_in_range(uint16_t value);

/**
 * Pack message group41.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int r3_group41_pack(
    uint8_t *dst_p,
    const struct r3_group41_t *src_p,
    size_t size);

/**
 * Unpack message group41.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int r3_group41_unpack(
    struct r3_group41_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from group41.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int r3_group41_init(struct r3_group41_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t r3_group41_cruise_control_target_speed_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double r3_group41_cruise_control_target_speed_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool r3_group41_cruise_control_target_speed_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t r3_group41_cruise_control_last_target_speed_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double r3_group41_cruise_control_last_target_speed_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool r3_group41_cruise_control_last_target_speed_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t r3_group41_cruise_control_speed_error_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double r3_group41_cruise_control_speed_error_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool r3_group41_cruise_control_speed_error_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t r3_group41_cruise_control_controller_state_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double r3_group41_cruise_control_controller_state_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool r3_group41_cruise_control_controller_state_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t r3_group41_cruise_control_input_state_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double r3_group41_cruise_control_input_state_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool r3_group41_cruise_control_input_state_is_in_range(uint16_t value);

/**
 * Pack message group38.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int r3_group38_pack(
    uint8_t *dst_p,
    const struct r3_group38_t *src_p,
    size_t size);

/**
 * Unpack message group38.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int r3_group38_unpack(
    struct r3_group38_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from group38.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int r3_group38_init(struct r3_group38_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t r3_group38_ecu_temperature_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double r3_group38_ecu_temperature_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool r3_group38_ecu_temperature_is_in_range(uint16_t value);

/**
 * Pack message group37.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int r3_group37_pack(
    uint8_t *dst_p,
    const struct r3_group37_t *src_p,
    size_t size);

/**
 * Unpack message group37.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int r3_group37_unpack(
    struct r3_group37_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from group37.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int r3_group37_init(struct r3_group37_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t r3_group37_shock_travel_sensor_front_left_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double r3_group37_shock_travel_sensor_front_left_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool r3_group37_shock_travel_sensor_front_left_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t r3_group37_shock_travel_sensor_front_right_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double r3_group37_shock_travel_sensor_front_right_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool r3_group37_shock_travel_sensor_front_right_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t r3_group37_shock_travel_sensor_rear_left_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double r3_group37_shock_travel_sensor_rear_left_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool r3_group37_shock_travel_sensor_rear_left_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t r3_group37_shock_travel_sensor_rear_right_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double r3_group37_shock_travel_sensor_rear_right_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool r3_group37_shock_travel_sensor_rear_right_is_in_range(int16_t value);

/**
 * Pack message group36.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int r3_group36_pack(
    uint8_t *dst_p,
    const struct r3_group36_t *src_p,
    size_t size);

/**
 * Unpack message group36.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int r3_group36_unpack(
    struct r3_group36_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from group36.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int r3_group36_init(struct r3_group36_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t r3_group36_shk_trvl_sens_front_left_uncal_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double r3_group36_shk_trvl_sens_front_left_uncal_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool r3_group36_shk_trvl_sens_front_left_uncal_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t r3_group36_shk_trvl_sens_front_right_uncal_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double r3_group36_shk_trvl_sens_front_right_uncal_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool r3_group36_shk_trvl_sens_front_right_uncal_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t r3_group36_shk_trvl_sens_rear_left_uncal_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double r3_group36_shk_trvl_sens_rear_left_uncal_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool r3_group36_shk_trvl_sens_rear_left_uncal_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t r3_group36_shk_trvl_sens_rear_right_uncal_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double r3_group36_shk_trvl_sens_rear_right_uncal_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool r3_group36_shk_trvl_sens_rear_right_uncal_is_in_range(uint16_t value);

/**
 * Pack message group35.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int r3_group35_pack(
    uint8_t *dst_p,
    const struct r3_group35_t *src_p,
    size_t size);

/**
 * Unpack message group35.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int r3_group35_unpack(
    struct r3_group35_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from group35.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int r3_group35_init(struct r3_group35_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t r3_group35_wideband_sensor_9_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double r3_group35_wideband_sensor_9_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool r3_group35_wideband_sensor_9_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t r3_group35_wideband_sensor_10_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double r3_group35_wideband_sensor_10_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool r3_group35_wideband_sensor_10_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t r3_group35_wideband_sensor_11_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double r3_group35_wideband_sensor_11_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool r3_group35_wideband_sensor_11_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t r3_group35_wideband_sensor_12_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double r3_group35_wideband_sensor_12_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool r3_group35_wideband_sensor_12_is_in_range(uint16_t value);

/**
 * Pack message group34.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int r3_group34_pack(
    uint8_t *dst_p,
    const struct r3_group34_t *src_p,
    size_t size);

/**
 * Unpack message group34.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int r3_group34_unpack(
    struct r3_group34_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from group34.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int r3_group34_init(struct r3_group34_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t r3_group34_wideband_sensor_5_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double r3_group34_wideband_sensor_5_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool r3_group34_wideband_sensor_5_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t r3_group34_wideband_sensor_6_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double r3_group34_wideband_sensor_6_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool r3_group34_wideband_sensor_6_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t r3_group34_wideband_sensor_7_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double r3_group34_wideband_sensor_7_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool r3_group34_wideband_sensor_7_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t r3_group34_wideband_sensor_8_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double r3_group34_wideband_sensor_8_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool r3_group34_wideband_sensor_8_is_in_range(uint16_t value);

/**
 * Pack message group33.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int r3_group33_pack(
    uint8_t *dst_p,
    const struct r3_group33_t *src_p,
    size_t size);

/**
 * Unpack message group33.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int r3_group33_unpack(
    struct r3_group33_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from group33.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int r3_group33_init(struct r3_group33_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t r3_group33_tq_mgmt_combined_ignition_corr_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double r3_group33_tq_mgmt_combined_ignition_corr_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool r3_group33_tq_mgmt_combined_ignition_corr_is_in_range(int16_t value);

/**
 * Pack message group32.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int r3_group32_pack(
    uint8_t *dst_p,
    const struct r3_group32_t *src_p,
    size_t size);

/**
 * Unpack message group32.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int r3_group32_unpack(
    struct r3_group32_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from group32.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int r3_group32_init(struct r3_group32_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t r3_group32_tq_mgmt_drvshft_rpm_target_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double r3_group32_tq_mgmt_drvshft_rpm_target_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool r3_group32_tq_mgmt_drvshft_rpm_target_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t r3_group32_tq_mgmt_drvshft_rpm_err_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double r3_group32_tq_mgmt_drvshft_rpm_err_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool r3_group32_tq_mgmt_drvshft_rpm_err_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t r3_group32_tq_mgmt_drvshft_rpm_err_ign_corr_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double r3_group32_tq_mgmt_drvshft_rpm_err_ign_corr_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool r3_group32_tq_mgmt_drvshft_rpm_err_ign_corr_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t r3_group32_tq_mgmt_drvshft_rpm_t_ing_corr_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double r3_group32_tq_mgmt_drvshft_rpm_t_ing_corr_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool r3_group32_tq_mgmt_drvshft_rpm_t_ing_corr_is_in_range(int16_t value);

/**
 * Pack message group31.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int r3_group31_pack(
    uint8_t *dst_p,
    const struct r3_group31_t *src_p,
    size_t size);

/**
 * Unpack message group31.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int r3_group31_unpack(
    struct r3_group31_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from group31.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int r3_group31_init(struct r3_group31_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t r3_group31_race_timer_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double r3_group31_race_timer_decode(uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool r3_group31_race_timer_is_in_range(uint32_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t r3_group31_ignition_angle_bank_1_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double r3_group31_ignition_angle_bank_1_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool r3_group31_ignition_angle_bank_1_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t r3_group31_ignition_angle_bank_2_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double r3_group31_ignition_angle_bank_2_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool r3_group31_ignition_angle_bank_2_is_in_range(int16_t value);

/**
 * Pack message group4.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int r3_group4_pack(
    uint8_t *dst_p,
    const struct r3_group4_t *src_p,
    size_t size);

/**
 * Unpack message group4.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int r3_group4_unpack(
    struct r3_group4_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from group4.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int r3_group4_init(struct r3_group4_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t r3_group4_injection_stage_1_average_time_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double r3_group4_injection_stage_1_average_time_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool r3_group4_injection_stage_1_average_time_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t r3_group4_injection_stage_2_average_time_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double r3_group4_injection_stage_2_average_time_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool r3_group4_injection_stage_2_average_time_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t r3_group4_injection_stage_3_average_time_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double r3_group4_injection_stage_3_average_time_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool r3_group4_injection_stage_3_average_time_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t r3_group4_injection_stage_4_average_time_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double r3_group4_injection_stage_4_average_time_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool r3_group4_injection_stage_4_average_time_is_in_range(uint16_t value);

/**
 * Pack message group2.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int r3_group2_pack(
    uint8_t *dst_p,
    const struct r3_group2_t *src_p,
    size_t size);

/**
 * Unpack message group2.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int r3_group2_unpack(
    struct r3_group2_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from group2.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int r3_group2_init(struct r3_group2_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t r3_group2_injection_stage_1_duty_cycle_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double r3_group2_injection_stage_1_duty_cycle_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool r3_group2_injection_stage_1_duty_cycle_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t r3_group2_injection_stage_2_duty_cycle_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double r3_group2_injection_stage_2_duty_cycle_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool r3_group2_injection_stage_2_duty_cycle_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t r3_group2_ignition_angle_leading_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double r3_group2_ignition_angle_leading_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool r3_group2_ignition_angle_leading_is_in_range(int16_t value);

/**
 * Pack message group30.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int r3_group30_pack(
    uint8_t *dst_p,
    const struct r3_group30_t *src_p,
    size_t size);

/**
 * Unpack message group30.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int r3_group30_unpack(
    struct r3_group30_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from group30.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int r3_group30_init(struct r3_group30_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t r3_group30_gearbox_line_pressure_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double r3_group30_gearbox_line_pressure_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool r3_group30_gearbox_line_pressure_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t r3_group30_injection_stage_3_duty_cycle_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double r3_group30_injection_stage_3_duty_cycle_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool r3_group30_injection_stage_3_duty_cycle_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t r3_group30_injection_stage_4_duty_cycle_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double r3_group30_injection_stage_4_duty_cycle_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool r3_group30_injection_stage_4_duty_cycle_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t r3_group30_crank_case_pressure_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double r3_group30_crank_case_pressure_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool r3_group30_crank_case_pressure_is_in_range(uint16_t value);

/**
 * Pack message group29.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int r3_group29_pack(
    uint8_t *dst_p,
    const struct r3_group29_t *src_p,
    size_t size);

/**
 * Unpack message group29.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int r3_group29_unpack(
    struct r3_group29_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from group29.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int r3_group29_init(struct r3_group29_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t r3_group29_generic_sensor_9_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double r3_group29_generic_sensor_9_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool r3_group29_generic_sensor_9_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t r3_group29_generic_sensor_10_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double r3_group29_generic_sensor_10_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool r3_group29_generic_sensor_10_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t r3_group29_target_lambda_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double r3_group29_target_lambda_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool r3_group29_target_lambda_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t r3_group29_nitrous_stage_1_output_state_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double r3_group29_nitrous_stage_1_output_state_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool r3_group29_nitrous_stage_1_output_state_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t r3_group29_nitrous_stage_2_output_state_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double r3_group29_nitrous_stage_2_output_state_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool r3_group29_nitrous_stage_2_output_state_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t r3_group29_nitrous_stage_3_output_state_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double r3_group29_nitrous_stage_3_output_state_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool r3_group29_nitrous_stage_3_output_state_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t r3_group29_nitrous_stage_4_output_state_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double r3_group29_nitrous_stage_4_output_state_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool r3_group29_nitrous_stage_4_output_state_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t r3_group29_nitrous_stage_5_output_state_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double r3_group29_nitrous_stage_5_output_state_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool r3_group29_nitrous_stage_5_output_state_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t r3_group29_nitrous_stage_6_output_state_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double r3_group29_nitrous_stage_6_output_state_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool r3_group29_nitrous_stage_6_output_state_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t r3_group29_water_injection_adv_output_state_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double r3_group29_water_injection_adv_output_state_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool r3_group29_water_injection_adv_output_state_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int8_t r3_group29_torque_management_knob_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double r3_group29_torque_management_knob_decode(int8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool r3_group29_torque_management_knob_is_in_range(int8_t value);

/**
 * Pack message group28.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int r3_group28_pack(
    uint8_t *dst_p,
    const struct r3_group28_t *src_p,
    size_t size);

/**
 * Unpack message group28.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int r3_group28_unpack(
    struct r3_group28_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from group28.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int r3_group28_init(struct r3_group28_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t r3_group28_generic_sensor_5_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double r3_group28_generic_sensor_5_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool r3_group28_generic_sensor_5_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t r3_group28_generic_sensor_6_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double r3_group28_generic_sensor_6_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool r3_group28_generic_sensor_6_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t r3_group28_generic_sensor_7_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double r3_group28_generic_sensor_7_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool r3_group28_generic_sensor_7_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t r3_group28_generic_sensor_8_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double r3_group28_generic_sensor_8_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool r3_group28_generic_sensor_8_is_in_range(uint16_t value);

/**
 * Pack message group27.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int r3_group27_pack(
    uint8_t *dst_p,
    const struct r3_group27_t *src_p,
    size_t size);

/**
 * Unpack message group27.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int r3_group27_unpack(
    struct r3_group27_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from group27.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int r3_group27_init(struct r3_group27_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t r3_group27_generic_sensor_1_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double r3_group27_generic_sensor_1_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool r3_group27_generic_sensor_1_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t r3_group27_generic_sensor_2_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double r3_group27_generic_sensor_2_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool r3_group27_generic_sensor_2_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t r3_group27_generic_sensor_3_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double r3_group27_generic_sensor_3_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool r3_group27_generic_sensor_3_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t r3_group27_generic_sensor_4_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double r3_group27_generic_sensor_4_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool r3_group27_generic_sensor_4_is_in_range(uint16_t value);

/**
 * Pack message group26.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int r3_group26_pack(
    uint8_t *dst_p,
    const struct r3_group26_t *src_p,
    size_t size);

/**
 * Unpack message group26.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int r3_group26_unpack(
    struct r3_group26_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from group26.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int r3_group26_init(struct r3_group26_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t r3_group26_nos_pressure_sensor_2_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double r3_group26_nos_pressure_sensor_2_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool r3_group26_nos_pressure_sensor_2_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t r3_group26_nos_pressure_sensor_3_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double r3_group26_nos_pressure_sensor_3_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool r3_group26_nos_pressure_sensor_3_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t r3_group26_nos_pressure_sensor_4_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double r3_group26_nos_pressure_sensor_4_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool r3_group26_nos_pressure_sensor_4_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t r3_group26_turbo_speed_sensor_2_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double r3_group26_turbo_speed_sensor_2_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool r3_group26_turbo_speed_sensor_2_is_in_range(uint16_t value);

/**
 * Pack message group25.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int r3_group25_pack(
    uint8_t *dst_p,
    const struct r3_group25_t *src_p,
    size_t size);

/**
 * Unpack message group25.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int r3_group25_unpack(
    struct r3_group25_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from group25.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int r3_group25_init(struct r3_group25_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t r3_group25_ignition_switch_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double r3_group25_ignition_switch_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool r3_group25_ignition_switch_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t r3_group25_turbo_timer_time_remaining_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double r3_group25_turbo_timer_time_remaining_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool r3_group25_turbo_timer_time_remaining_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t r3_group25_turbo_timer_engine_time_remain_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double r3_group25_turbo_timer_engine_time_remain_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool r3_group25_turbo_timer_engine_time_remain_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t r3_group25_pit_lane_limiter_error_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double r3_group25_pit_lane_limiter_error_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool r3_group25_pit_lane_limiter_error_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t r3_group25_pit_lane_limiter_active_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double r3_group25_pit_lane_limiter_active_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool r3_group25_pit_lane_limiter_active_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t r3_group25_pit_lane_limiter_switch_state_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double r3_group25_pit_lane_limiter_switch_state_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool r3_group25_pit_lane_limiter_switch_state_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t r3_group25_abs_error_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double r3_group25_abs_error_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool r3_group25_abs_error_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t r3_group25_abs_active_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double r3_group25_abs_active_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool r3_group25_abs_active_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t r3_group25_abs_armed_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double r3_group25_abs_armed_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool r3_group25_abs_armed_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t r3_group25_steering_wheel_angle_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double r3_group25_steering_wheel_angle_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool r3_group25_steering_wheel_angle_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t r3_group25_driveshaft_rpm_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double r3_group25_driveshaft_rpm_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool r3_group25_driveshaft_rpm_is_in_range(uint16_t value);

/**
 * Pack message group23.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int r3_group23_pack(
    uint8_t *dst_p,
    const struct r3_group23_t *src_p,
    size_t size);

/**
 * Unpack message group23.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int r3_group23_unpack(
    struct r3_group23_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from group23.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int r3_group23_init(struct r3_group23_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t r3_group23_fuel_trim_short_term_bank_1_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double r3_group23_fuel_trim_short_term_bank_1_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool r3_group23_fuel_trim_short_term_bank_1_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t r3_group23_fuel_trim_short_term_bank_2_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double r3_group23_fuel_trim_short_term_bank_2_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool r3_group23_fuel_trim_short_term_bank_2_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t r3_group23_fuel_trim_short_term_bank_3_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double r3_group23_fuel_trim_short_term_bank_3_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool r3_group23_fuel_trim_short_term_bank_3_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t r3_group23_fuel_trim_short_term_bank_4_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double r3_group23_fuel_trim_short_term_bank_4_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool r3_group23_fuel_trim_short_term_bank_4_is_in_range(int16_t value);

/**
 * Pack message group22.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int r3_group22_pack(
    uint8_t *dst_p,
    const struct r3_group22_t *src_p,
    size_t size);

/**
 * Unpack message group22.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int r3_group22_unpack(
    struct r3_group22_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from group22.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int r3_group22_init(struct r3_group22_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t r3_group22_fuel_level_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double r3_group22_fuel_level_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool r3_group22_fuel_level_is_in_range(uint16_t value);

/**
 * Pack message group21.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int r3_group21_pack(
    uint8_t *dst_p,
    const struct r3_group21_t *src_p,
    size_t size);

/**
 * Unpack message group21.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int r3_group21_unpack(
    struct r3_group21_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from group21.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int r3_group21_init(struct r3_group21_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t r3_group21_gearbox_oil_temperature_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double r3_group21_gearbox_oil_temperature_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool r3_group21_gearbox_oil_temperature_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t r3_group21_diff_oil_temperature_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double r3_group21_diff_oil_temperature_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool r3_group21_diff_oil_temperature_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t r3_group21_fuel_composition_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double r3_group21_fuel_composition_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool r3_group21_fuel_composition_is_in_range(uint16_t value);

/**
 * Pack message group19.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int r3_group19_pack(
    uint8_t *dst_p,
    const struct r3_group19_t *src_p,
    size_t size);

/**
 * Unpack message group19.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int r3_group19_unpack(
    struct r3_group19_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from group19.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int r3_group19_init(struct r3_group19_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t r3_group19_ambient_air_temperature_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double r3_group19_ambient_air_temperature_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool r3_group19_ambient_air_temperature_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t r3_group19_relative_humidity_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double r3_group19_relative_humidity_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool r3_group19_relative_humidity_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t r3_group19_specific_humidity_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double r3_group19_specific_humidity_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool r3_group19_specific_humidity_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t r3_group19_absolute_humidity_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double r3_group19_absolute_humidity_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool r3_group19_absolute_humidity_is_in_range(uint16_t value);

/**
 * Pack message group18.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int r3_group18_pack(
    uint8_t *dst_p,
    const struct r3_group18_t *src_p,
    size_t size);

/**
 * Unpack message group18.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int r3_group18_unpack(
    struct r3_group18_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from group18.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int r3_group18_init(struct r3_group18_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t r3_group18_egt_sensor_10_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double r3_group18_egt_sensor_10_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool r3_group18_egt_sensor_10_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t r3_group18_egt_sensor_11_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double r3_group18_egt_sensor_11_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool r3_group18_egt_sensor_11_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t r3_group18_egt_sensor_12_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double r3_group18_egt_sensor_12_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool r3_group18_egt_sensor_12_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t r3_group18_egt_sensor_9_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double r3_group18_egt_sensor_9_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool r3_group18_egt_sensor_9_is_in_range(uint16_t value);

/**
 * Pack message group17.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int r3_group17_pack(
    uint8_t *dst_p,
    const struct r3_group17_t *src_p,
    size_t size);

/**
 * Unpack message group17.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int r3_group17_unpack(
    struct r3_group17_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from group17.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int r3_group17_init(struct r3_group17_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t r3_group17_egt_sensor_5_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double r3_group17_egt_sensor_5_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool r3_group17_egt_sensor_5_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t r3_group17_egt_sensor_6_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double r3_group17_egt_sensor_6_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool r3_group17_egt_sensor_6_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t r3_group17_egt_sensor_7_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double r3_group17_egt_sensor_7_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool r3_group17_egt_sensor_7_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t r3_group17_egt_sensor_8_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double r3_group17_egt_sensor_8_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool r3_group17_egt_sensor_8_is_in_range(uint16_t value);

/**
 * Pack message group16.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int r3_group16_pack(
    uint8_t *dst_p,
    const struct r3_group16_t *src_p,
    size_t size);

/**
 * Unpack message group16.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int r3_group16_unpack(
    struct r3_group16_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from group16.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int r3_group16_init(struct r3_group16_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t r3_group16_egt_sensor_1_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double r3_group16_egt_sensor_1_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool r3_group16_egt_sensor_1_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t r3_group16_egt_sensor_2_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double r3_group16_egt_sensor_2_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool r3_group16_egt_sensor_2_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t r3_group16_egt_sensor_3_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double r3_group16_egt_sensor_3_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool r3_group16_egt_sensor_3_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t r3_group16_egt_sensor_4_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double r3_group16_egt_sensor_4_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool r3_group16_egt_sensor_4_is_in_range(uint16_t value);

/**
 * Pack message group14.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int r3_group14_pack(
    uint8_t *dst_p,
    const struct r3_group14_t *src_p,
    size_t size);

/**
 * Unpack message group14.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int r3_group14_unpack(
    struct r3_group14_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from group14.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int r3_group14_init(struct r3_group14_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t r3_group14_fuel_flow_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double r3_group14_fuel_flow_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool r3_group14_fuel_flow_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t r3_group14_fuel_flow_return_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double r3_group14_fuel_flow_return_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool r3_group14_fuel_flow_return_is_in_range(uint16_t value);

/**
 * Pack message group12.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int r3_group12_pack(
    uint8_t *dst_p,
    const struct r3_group12_t *src_p,
    size_t size);

/**
 * Unpack message group12.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int r3_group12_unpack(
    struct r3_group12_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from group12.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int r3_group12_init(struct r3_group12_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t r3_group12_generic_output_1_duty_cycle_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double r3_group12_generic_output_1_duty_cycle_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool r3_group12_generic_output_1_duty_cycle_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t r3_group12_boost_control_output_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double r3_group12_boost_control_output_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool r3_group12_boost_control_output_is_in_range(uint16_t value);

/**
 * Pack message group11.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int r3_group11_pack(
    uint8_t *dst_p,
    const struct r3_group11_t *src_p,
    size_t size);

/**
 * Unpack message group11.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int r3_group11_unpack(
    struct r3_group11_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from group11.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int r3_group11_init(struct r3_group11_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t r3_group11_engine_limiting_active_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double r3_group11_engine_limiting_active_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool r3_group11_engine_limiting_active_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t r3_group11_launch_control_ignition_retard_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double r3_group11_launch_control_ignition_retard_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool r3_group11_launch_control_ignition_retard_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t r3_group11_launch_control_fuel_enrich_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double r3_group11_launch_control_fuel_enrich_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool r3_group11_launch_control_fuel_enrich_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t r3_group11_longitudinal_g_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double r3_group11_longitudinal_g_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool r3_group11_longitudinal_g_is_in_range(int16_t value);

/**
 * Pack message group10.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int r3_group10_pack(
    uint8_t *dst_p,
    const struct r3_group10_t *src_p,
    size_t size);

/**
 * Unpack message group10.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int r3_group10_unpack(
    struct r3_group10_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from group10.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int r3_group10_init(struct r3_group10_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t r3_group10_exhaust_cam_angle_1_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double r3_group10_exhaust_cam_angle_1_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool r3_group10_exhaust_cam_angle_1_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t r3_group10_exhaust_cam_angle_2_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double r3_group10_exhaust_cam_angle_2_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool r3_group10_exhaust_cam_angle_2_is_in_range(int16_t value);

/**
 * Pack message group9.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int r3_group9_pack(
    uint8_t *dst_p,
    const struct r3_group9_t *src_p,
    size_t size);

/**
 * Unpack message group9.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int r3_group9_unpack(
    struct r3_group9_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from group9.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int r3_group9_init(struct r3_group9_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t r3_group9_wheel_speed_front_left_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double r3_group9_wheel_speed_front_left_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool r3_group9_wheel_speed_front_left_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t r3_group9_wheel_speed_front_right_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double r3_group9_wheel_speed_front_right_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool r3_group9_wheel_speed_front_right_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t r3_group9_wheel_speed_rear_left_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double r3_group9_wheel_speed_rear_left_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool r3_group9_wheel_speed_rear_left_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t r3_group9_wheel_speed_rear_right_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double r3_group9_wheel_speed_rear_right_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool r3_group9_wheel_speed_rear_right_is_in_range(uint16_t value);

/**
 * Pack message group8.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int r3_group8_pack(
    uint8_t *dst_p,
    const struct r3_group8_t *src_p,
    size_t size);

/**
 * Unpack message group8.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int r3_group8_unpack(
    struct r3_group8_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from group8.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int r3_group8_init(struct r3_group8_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t r3_group8_brake_pressure_front_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double r3_group8_brake_pressure_front_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool r3_group8_brake_pressure_front_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t r3_group8_nos_pressure_sensor_1_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double r3_group8_nos_pressure_sensor_1_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool r3_group8_nos_pressure_sensor_1_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t r3_group8_turbo_speed_sensor_1_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double r3_group8_turbo_speed_sensor_1_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool r3_group8_turbo_speed_sensor_1_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t r3_group8_lateral_g_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double r3_group8_lateral_g_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool r3_group8_lateral_g_is_in_range(int16_t value);

/**
 * Pack message group6.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int r3_group6_pack(
    uint8_t *dst_p,
    const struct r3_group6_t *src_p,
    size_t size);

/**
 * Unpack message group6.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int r3_group6_unpack(
    struct r3_group6_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from group6.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int r3_group6_init(struct r3_group6_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t r3_group6_trigger_system_error_count_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double r3_group6_trigger_system_error_count_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool r3_group6_trigger_system_error_count_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t r3_group6_trigger_counter_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double r3_group6_trigger_counter_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool r3_group6_trigger_counter_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t r3_group6_trigger_sync_level_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double r3_group6_trigger_sync_level_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool r3_group6_trigger_sync_level_is_in_range(uint16_t value);

/**
 * Pack message group7.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int r3_group7_pack(
    uint8_t *dst_p,
    const struct r3_group7_t *src_p,
    size_t size);

/**
 * Unpack message group7.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int r3_group7_unpack(
    struct r3_group7_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from group7.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int r3_group7_init(struct r3_group7_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t r3_group7_knock_level_1_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double r3_group7_knock_level_1_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool r3_group7_knock_level_1_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t r3_group7_knock_level_2_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double r3_group7_knock_level_2_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool r3_group7_knock_level_2_is_in_range(uint16_t value);

/**
 * Pack message group3.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int r3_group3_pack(
    uint8_t *dst_p,
    const struct r3_group3_t *src_p,
    size_t size);

/**
 * Unpack message group3.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int r3_group3_unpack(
    struct r3_group3_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from group3.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int r3_group3_init(struct r3_group3_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t r3_group3_wheel_slip_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double r3_group3_wheel_slip_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool r3_group3_wheel_slip_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t r3_group3_wheel_diff_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double r3_group3_wheel_diff_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool r3_group3_wheel_diff_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t r3_group3_launch_control_end_rpm_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double r3_group3_launch_control_end_rpm_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool r3_group3_launch_control_end_rpm_is_in_range(uint16_t value);

/**
 * Pack message group45.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int r3_group45_pack(
    uint8_t *dst_p,
    const struct r3_group45_t *src_p,
    size_t size);

/**
 * Unpack message group45.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int r3_group45_unpack(
    struct r3_group45_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from group45.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int r3_group45_init(struct r3_group45_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t r3_group45_brake_pressure_rear_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double r3_group45_brake_pressure_rear_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool r3_group45_brake_pressure_rear_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t r3_group45_brake_pressure_front_ratio_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double r3_group45_brake_pressure_front_ratio_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool r3_group45_brake_pressure_front_ratio_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t r3_group45_brake_pressure_rear_ratio_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double r3_group45_brake_pressure_rear_ratio_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool r3_group45_brake_pressure_rear_ratio_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t r3_group45_brake_pressure_difference_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double r3_group45_brake_pressure_difference_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool r3_group45_brake_pressure_difference_is_in_range(int16_t value);

/**
 * Pack message group52.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int r3_group52_pack(
    uint8_t *dst_p,
    const struct r3_group52_t *src_p,
    size_t size);

/**
 * Unpack message group52.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int r3_group52_unpack(
    struct r3_group52_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from group52.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int r3_group52_init(struct r3_group52_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int32_t r3_group52_total_fuel_used_since_trip_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double r3_group52_total_fuel_used_since_trip_decode(int32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool r3_group52_total_fuel_used_since_trip_is_in_range(int32_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int32_t r3_group52_trip_meter_1_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double r3_group52_trip_meter_1_decode(int32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool r3_group52_trip_meter_1_is_in_range(int32_t value);

/**
 * Pack message group50.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int r3_group50_pack(
    uint8_t *dst_p,
    const struct r3_group50_t *src_p,
    size_t size);

/**
 * Unpack message group50.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int r3_group50_unpack(
    struct r3_group50_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from group50.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int r3_group50_init(struct r3_group50_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t r3_group50_front_tyre_recommended_pressure_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double r3_group50_front_tyre_recommended_pressure_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool r3_group50_front_tyre_recommended_pressure_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t r3_group50_rear_tyre_recommended_pressure_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double r3_group50_rear_tyre_recommended_pressure_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool r3_group50_rear_tyre_recommended_pressure_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t r3_group50_rear_right_tyre_air_leak_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double r3_group50_rear_right_tyre_air_leak_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool r3_group50_rear_right_tyre_air_leak_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t r3_group50_rear_left_tyre_air_leak_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double r3_group50_rear_left_tyre_air_leak_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool r3_group50_rear_left_tyre_air_leak_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t r3_group50_front_right_tyre_air_leak_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double r3_group50_front_right_tyre_air_leak_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool r3_group50_front_right_tyre_air_leak_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t r3_group50_front_left_tyre_air_leak_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double r3_group50_front_left_tyre_air_leak_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool r3_group50_front_left_tyre_air_leak_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t r3_group50_engine_protection_severity_level_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double r3_group50_engine_protection_severity_level_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool r3_group50_engine_protection_severity_level_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t r3_group50_engine_protection_reason_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double r3_group50_engine_protection_reason_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool r3_group50_engine_protection_reason_is_in_range(uint16_t value);

/**
 * Pack message group43.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int r3_group43_pack(
    uint8_t *dst_p,
    const struct r3_group43_t *src_p,
    size_t size);

/**
 * Unpack message group43.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int r3_group43_unpack(
    struct r3_group43_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from group43.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int r3_group43_init(struct r3_group43_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t r3_group43_vertical_g_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double r3_group43_vertical_g_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool r3_group43_vertical_g_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t r3_group43_pitch_rate_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double r3_group43_pitch_rate_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool r3_group43_pitch_rate_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t r3_group43_roll_rate_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double r3_group43_roll_rate_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool r3_group43_roll_rate_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t r3_group43_yaw_rate_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double r3_group43_yaw_rate_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool r3_group43_yaw_rate_is_in_range(int16_t value);

/**
 * Pack message group42.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int r3_group42_pack(
    uint8_t *dst_p,
    const struct r3_group42_t *src_p,
    size_t size);

/**
 * Unpack message group42.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int r3_group42_unpack(
    struct r3_group42_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from group42.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int r3_group42_init(struct r3_group42_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t r3_group42_total_fuel_used_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double r3_group42_total_fuel_used_decode(uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool r3_group42_total_fuel_used_is_in_range(uint32_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t r3_group42_rolling_antilag_switch_state_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double r3_group42_rolling_antilag_switch_state_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool r3_group42_rolling_antilag_switch_state_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t r3_group42_antilag_switch_state_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double r3_group42_antilag_switch_state_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool r3_group42_antilag_switch_state_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t r3_group42_antilag_output_state_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double r3_group42_antilag_output_state_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool r3_group42_antilag_output_state_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int8_t r3_group42_traction_control_switch_state_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double r3_group42_traction_control_switch_state_decode(int8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool r3_group42_traction_control_switch_state_is_in_range(int8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t r3_group42_primary_fuel_pump_output_state_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double r3_group42_primary_fuel_pump_output_state_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool r3_group42_primary_fuel_pump_output_state_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t r3_group42_aux_1_fuel_pump_output_state_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double r3_group42_aux_1_fuel_pump_output_state_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool r3_group42_aux_1_fuel_pump_output_state_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t r3_group42_aux_2_fuel_pump_output_state_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double r3_group42_aux_2_fuel_pump_output_state_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool r3_group42_aux_2_fuel_pump_output_state_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t r3_group42_aux_3_fuel_pump_output_state_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double r3_group42_aux_3_fuel_pump_output_state_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool r3_group42_aux_3_fuel_pump_output_state_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t r3_group42_nitrous_enable_1_switch_state_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double r3_group42_nitrous_enable_1_switch_state_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool r3_group42_nitrous_enable_1_switch_state_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t r3_group42_nitrous_enable_1_output_state_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double r3_group42_nitrous_enable_1_output_state_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool r3_group42_nitrous_enable_1_output_state_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t r3_group42_nitrous_enable_2_switch_state_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double r3_group42_nitrous_enable_2_switch_state_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool r3_group42_nitrous_enable_2_switch_state_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t r3_group42_nitrous_enable_2_output_state_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double r3_group42_nitrous_enable_2_output_state_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool r3_group42_nitrous_enable_2_output_state_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t r3_group42_nitrous_enable_3_switch_state_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double r3_group42_nitrous_enable_3_switch_state_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool r3_group42_nitrous_enable_3_switch_state_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t r3_group42_nitrous_enable_3_output_state_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double r3_group42_nitrous_enable_3_output_state_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool r3_group42_nitrous_enable_3_output_state_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t r3_group42_nitrous_enable_4_switch_state_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double r3_group42_nitrous_enable_4_switch_state_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool r3_group42_nitrous_enable_4_switch_state_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t r3_group42_nitrous_enable_4_output_state_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double r3_group42_nitrous_enable_4_output_state_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool r3_group42_nitrous_enable_4_output_state_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t r3_group42_nitrous_override_1_switch_state_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double r3_group42_nitrous_override_1_switch_state_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool r3_group42_nitrous_override_1_switch_state_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t r3_group42_nitrous_override_1_output_state_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double r3_group42_nitrous_override_1_output_state_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool r3_group42_nitrous_override_1_output_state_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t r3_group42_nitrous_override_2_switch_state_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double r3_group42_nitrous_override_2_switch_state_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool r3_group42_nitrous_override_2_switch_state_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t r3_group42_nitrous_override_2_output_state_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double r3_group42_nitrous_override_2_output_state_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool r3_group42_nitrous_override_2_output_state_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t r3_group42_nitrous_override_3_switch_state_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double r3_group42_nitrous_override_3_switch_state_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool r3_group42_nitrous_override_3_switch_state_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t r3_group42_nitrous_override_3_output_state_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double r3_group42_nitrous_override_3_output_state_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool r3_group42_nitrous_override_3_output_state_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t r3_group42_nitrous_override_4_switch_state_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double r3_group42_nitrous_override_4_switch_state_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool r3_group42_nitrous_override_4_switch_state_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t r3_group42_nitrous_override_4_output_state_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double r3_group42_nitrous_override_4_output_state_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool r3_group42_nitrous_override_4_output_state_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t r3_group42_water_inj_adv_en_switch_state_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double r3_group42_water_inj_adv_en_switch_state_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool r3_group42_water_inj_adv_en_switch_state_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t r3_group42_water_inj_adv_en_output_state_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double r3_group42_water_inj_adv_en_output_state_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool r3_group42_water_inj_adv_en_output_state_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t r3_group42_water_inj_adv_ovr_switch_state_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double r3_group42_water_inj_adv_ovr_switch_state_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool r3_group42_water_inj_adv_ovr_switch_state_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t r3_group42_water_inj_adv_ovr_output_state_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double r3_group42_water_inj_adv_ovr_output_state_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool r3_group42_water_inj_adv_ovr_output_state_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t r3_group42_cut_percentage_method_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double r3_group42_cut_percentage_method_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool r3_group42_cut_percentage_method_is_in_range(uint8_t value);

/**
 * Pack message group49.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int r3_group49_pack(
    uint8_t *dst_p,
    const struct r3_group49_t *src_p,
    size_t size);

/**
 * Unpack message group49.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int r3_group49_unpack(
    struct r3_group49_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from group49.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int r3_group49_init(struct r3_group49_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t r3_group49_front_left_tyre_sensor_battery_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double r3_group49_front_left_tyre_sensor_battery_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool r3_group49_front_left_tyre_sensor_battery_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t r3_group49_front_right_tyre_sensor_battery_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double r3_group49_front_right_tyre_sensor_battery_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool r3_group49_front_right_tyre_sensor_battery_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t r3_group49_rear_left_tyre_sensor_battery_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double r3_group49_rear_left_tyre_sensor_battery_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool r3_group49_rear_left_tyre_sensor_battery_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t r3_group49_rear_right_tyre_sensor_battery_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double r3_group49_rear_right_tyre_sensor_battery_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool r3_group49_rear_right_tyre_sensor_battery_is_in_range(uint16_t value);

/**
 * Pack message group48.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int r3_group48_pack(
    uint8_t *dst_p,
    const struct r3_group48_t *src_p,
    size_t size);

/**
 * Unpack message group48.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int r3_group48_unpack(
    struct r3_group48_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from group48.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int r3_group48_init(struct r3_group48_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t r3_group48_front_left_tyre_temperature_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double r3_group48_front_left_tyre_temperature_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool r3_group48_front_left_tyre_temperature_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t r3_group48_front_right_tyre_temperature_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double r3_group48_front_right_tyre_temperature_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool r3_group48_front_right_tyre_temperature_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t r3_group48_rear_left_tyre_temperature_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double r3_group48_rear_left_tyre_temperature_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool r3_group48_rear_left_tyre_temperature_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t r3_group48_rear_right_tyre_temperature_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double r3_group48_rear_right_tyre_temperature_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool r3_group48_rear_right_tyre_temperature_is_in_range(uint16_t value);

/**
 * Pack message group47.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int r3_group47_pack(
    uint8_t *dst_p,
    const struct r3_group47_t *src_p,
    size_t size);

/**
 * Unpack message group47.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int r3_group47_unpack(
    struct r3_group47_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from group47.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int r3_group47_init(struct r3_group47_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t r3_group47_front_left_tyre_pressure_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double r3_group47_front_left_tyre_pressure_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool r3_group47_front_left_tyre_pressure_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t r3_group47_front_right_tyre_pressure_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double r3_group47_front_right_tyre_pressure_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool r3_group47_front_right_tyre_pressure_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t r3_group47_rear_left_tyre_pressure_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double r3_group47_rear_left_tyre_pressure_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool r3_group47_rear_left_tyre_pressure_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t r3_group47_rear_right_tyre_pressure_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double r3_group47_rear_right_tyre_pressure_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool r3_group47_rear_right_tyre_pressure_is_in_range(uint16_t value);

/**
 * Pack message group40.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int r3_group40_pack(
    uint8_t *dst_p,
    const struct r3_group40_t *src_p,
    size_t size);

/**
 * Unpack message group40.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int r3_group40_unpack(
    struct r3_group40_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from group40.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int r3_group40_init(struct r3_group40_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t r3_group40_injector_pressure_differential_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double r3_group40_injector_pressure_differential_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool r3_group40_injector_pressure_differential_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t r3_group40_accelerator_pedal_position_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double r3_group40_accelerator_pedal_position_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool r3_group40_accelerator_pedal_position_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t r3_group40_exhaust_manifold_pressure_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double r3_group40_exhaust_manifold_pressure_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool r3_group40_exhaust_manifold_pressure_is_in_range(uint16_t value);

/**
 * Pack message group20.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int r3_group20_pack(
    uint8_t *dst_p,
    const struct r3_group20_t *src_p,
    size_t size);

/**
 * Unpack message group20.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int r3_group20_unpack(
    struct r3_group20_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from group20.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int r3_group20_init(struct r3_group20_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t r3_group20_coolant_temperature_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double r3_group20_coolant_temperature_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool r3_group20_coolant_temperature_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t r3_group20_air_temperature_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double r3_group20_air_temperature_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool r3_group20_air_temperature_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t r3_group20_fuel_temperature_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double r3_group20_fuel_temperature_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool r3_group20_fuel_temperature_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t r3_group20_oil_temperature_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double r3_group20_oil_temperature_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool r3_group20_oil_temperature_is_in_range(uint16_t value);

/**
 * Pack message group24.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int r3_group24_pack(
    uint8_t *dst_p,
    const struct r3_group24_t *src_p,
    size_t size);

/**
 * Unpack message group24.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int r3_group24_unpack(
    struct r3_group24_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from group24.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int r3_group24_init(struct r3_group24_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t r3_group24_neutral_switch_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double r3_group24_neutral_switch_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool r3_group24_neutral_switch_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t r3_group24_reverse_switch_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double r3_group24_reverse_switch_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool r3_group24_reverse_switch_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t r3_group24_gear_switch_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double r3_group24_gear_switch_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool r3_group24_gear_switch_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t r3_group24_decel_cut_active_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double r3_group24_decel_cut_active_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool r3_group24_decel_cut_active_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t r3_group24_transient_throttle_active_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double r3_group24_transient_throttle_active_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool r3_group24_transient_throttle_active_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t r3_group24_brake_pedal_switch_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double r3_group24_brake_pedal_switch_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool r3_group24_brake_pedal_switch_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t r3_group24_clutch_switch_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double r3_group24_clutch_switch_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool r3_group24_clutch_switch_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t r3_group24_oil_pressure_light_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double r3_group24_oil_pressure_light_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool r3_group24_oil_pressure_light_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t r3_group24_launch_control_active_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double r3_group24_launch_control_active_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool r3_group24_launch_control_active_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t r3_group24_launch_control_switch_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double r3_group24_launch_control_switch_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool r3_group24_launch_control_switch_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t r3_group24_aux_rpm_limiter_active_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double r3_group24_aux_rpm_limiter_active_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool r3_group24_aux_rpm_limiter_active_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t r3_group24_flat_shift_switch_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double r3_group24_flat_shift_switch_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool r3_group24_flat_shift_switch_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t r3_group24_torque_reduction_active_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double r3_group24_torque_reduction_active_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool r3_group24_torque_reduction_active_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t r3_group24_traction_control_enabled_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double r3_group24_traction_control_enabled_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool r3_group24_traction_control_enabled_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t r3_group24_traction_control_active_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double r3_group24_traction_control_active_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool r3_group24_traction_control_active_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t r3_group24_air_con_request_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double r3_group24_air_con_request_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool r3_group24_air_con_request_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t r3_group24_air_con_output_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double r3_group24_air_con_output_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool r3_group24_air_con_output_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t r3_group24_thermofan_4_on_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double r3_group24_thermofan_4_on_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool r3_group24_thermofan_4_on_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t r3_group24_thermofan_2_on_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double r3_group24_thermofan_2_on_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool r3_group24_thermofan_2_on_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t r3_group24_thermofan_3_on_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double r3_group24_thermofan_3_on_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool r3_group24_thermofan_3_on_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t r3_group24_thermofan_1_on_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double r3_group24_thermofan_1_on_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool r3_group24_thermofan_1_on_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int8_t r3_group24_rotary_trim_pot_1_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double r3_group24_rotary_trim_pot_1_decode(int8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool r3_group24_rotary_trim_pot_1_is_in_range(int8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int8_t r3_group24_rotary_trim_pot_2_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double r3_group24_rotary_trim_pot_2_decode(int8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool r3_group24_rotary_trim_pot_2_is_in_range(int8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int8_t r3_group24_rotary_trim_pot_3_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double r3_group24_rotary_trim_pot_3_decode(int8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool r3_group24_rotary_trim_pot_3_is_in_range(int8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t r3_group24_check_engine_light_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double r3_group24_check_engine_light_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool r3_group24_check_engine_light_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t r3_group24_battery_light_active_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double r3_group24_battery_light_active_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool r3_group24_battery_light_active_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t r3_group24_hand_brake_state_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double r3_group24_hand_brake_state_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool r3_group24_hand_brake_state_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t r3_group24_traction_control_light_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double r3_group24_traction_control_light_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool r3_group24_traction_control_light_is_in_range(uint8_t value);

/**
 * Pack message group15.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int r3_group15_pack(
    uint8_t *dst_p,
    const struct r3_group15_t *src_p,
    size_t size);

/**
 * Unpack message group15.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int r3_group15_unpack(
    struct r3_group15_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from group15.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int r3_group15_init(struct r3_group15_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t r3_group15_battery_voltage_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double r3_group15_battery_voltage_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool r3_group15_battery_voltage_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t r3_group15_target_boost_level_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double r3_group15_target_boost_level_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool r3_group15_target_boost_level_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t r3_group15_barometric_pressure_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double r3_group15_barometric_pressure_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool r3_group15_barometric_pressure_is_in_range(uint16_t value);

/**
 * Pack message group39.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int r3_group39_pack(
    uint8_t *dst_p,
    const struct r3_group39_t *src_p,
    size_t size);

/**
 * Unpack message group39.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int r3_group39_unpack(
    struct r3_group39_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from group39.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int r3_group39_init(struct r3_group39_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t r3_group39_wideband_overall_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double r3_group39_wideband_overall_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool r3_group39_wideband_overall_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t r3_group39_wideband_bank_1_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double r3_group39_wideband_bank_1_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool r3_group39_wideband_bank_1_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t r3_group39_wideband_bank_2_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double r3_group39_wideband_bank_2_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool r3_group39_wideband_bank_2_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int8_t r3_group39_gear_selector_position_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double r3_group39_gear_selector_position_decode(int8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool r3_group39_gear_selector_position_is_in_range(int8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int8_t r3_group39_gear_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double r3_group39_gear_decode(int8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool r3_group39_gear_is_in_range(int8_t value);

/**
 * Pack message group13.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int r3_group13_pack(
    uint8_t *dst_p,
    const struct r3_group13_t *src_p,
    size_t size);

/**
 * Unpack message group13.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int r3_group13_unpack(
    struct r3_group13_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from group13.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int r3_group13_init(struct r3_group13_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t r3_group13_vehicle_speed_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double r3_group13_vehicle_speed_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool r3_group13_vehicle_speed_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t r3_group13_intake_cam_angle_1_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double r3_group13_intake_cam_angle_1_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool r3_group13_intake_cam_angle_1_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t r3_group13_intake_cam_angle_2_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double r3_group13_intake_cam_angle_2_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool r3_group13_intake_cam_angle_2_is_in_range(int16_t value);

/**
 * Pack message group5.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int r3_group5_pack(
    uint8_t *dst_p,
    const struct r3_group5_t *src_p,
    size_t size);

/**
 * Unpack message group5.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int r3_group5_unpack(
    struct r3_group5_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from group5.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int r3_group5_init(struct r3_group5_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t r3_group5_wideband_sensor_1_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double r3_group5_wideband_sensor_1_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool r3_group5_wideband_sensor_1_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t r3_group5_wideband_sensor_2_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double r3_group5_wideband_sensor_2_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool r3_group5_wideband_sensor_2_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t r3_group5_wideband_sensor_3_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double r3_group5_wideband_sensor_3_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool r3_group5_wideband_sensor_3_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t r3_group5_wideband_sensor_4_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double r3_group5_wideband_sensor_4_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool r3_group5_wideband_sensor_4_is_in_range(uint16_t value);

/**
 * Pack message group1.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int r3_group1_pack(
    uint8_t *dst_p,
    const struct r3_group1_t *src_p,
    size_t size);

/**
 * Unpack message group1.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int r3_group1_unpack(
    struct r3_group1_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from group1.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int r3_group1_init(struct r3_group1_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t r3_group1_fuel_pressure_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double r3_group1_fuel_pressure_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool r3_group1_fuel_pressure_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t r3_group1_oil_pressure_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double r3_group1_oil_pressure_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool r3_group1_oil_pressure_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t r3_group1_engine_demand_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double r3_group1_engine_demand_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool r3_group1_engine_demand_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t r3_group1_wastegate_pressure_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double r3_group1_wastegate_pressure_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool r3_group1_wastegate_pressure_is_in_range(uint16_t value);

/**
 * Pack message group0.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int r3_group0_pack(
    uint8_t *dst_p,
    const struct r3_group0_t *src_p,
    size_t size);

/**
 * Unpack message group0.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int r3_group0_unpack(
    struct r3_group0_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from group0.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int r3_group0_init(struct r3_group0_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t r3_group0_rpm_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double r3_group0_rpm_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool r3_group0_rpm_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t r3_group0_manifold_pressure_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double r3_group0_manifold_pressure_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool r3_group0_manifold_pressure_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t r3_group0_throttle_position_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double r3_group0_throttle_position_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool r3_group0_throttle_position_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t r3_group0_coolant_pressure_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double r3_group0_coolant_pressure_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool r3_group0_coolant_pressure_is_in_range(uint16_t value);


#ifdef __cplusplus
}
#endif

#endif
